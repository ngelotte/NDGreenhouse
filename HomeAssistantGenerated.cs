//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v23.38.0.0
//   At: 2023-10-15T12:09:52.9342403-07:00
//
// *** Make sure the version of the codegen tool and your nugets Joysoftware.NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update JoySoftware.NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/v3/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CalendarEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<InputNumberEntities>();
        serviceCollection.AddTransient<InputSelectEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<RemoteEntities>();
        serviceCollection.AddTransient<ScriptEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CalendarServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<EsphomeServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GooglewifiServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HassioServices>();
        serviceCollection.AddTransient<HumidifierServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LawnMowerServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<NetdaemonServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TemplateServices>();
        serviceCollection.AddTransient<TextServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<UtilityMeterServices>();
        serviceCollection.AddTransient<VacuumServices>();
        serviceCollection.AddTransient<WaterHeaterServices>();
        serviceCollection.AddTransient<WeatherServices>();
        serviceCollection.AddTransient<ZoneServices>();
        return serviceCollection;
    }
}

public interface IEntities
{
    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CalendarEntities Calendar { get; }

    CameraEntities Camera { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    InputBooleanEntities InputBoolean { get; }

    InputNumberEntities InputNumber { get; }

    InputSelectEntities InputSelect { get; }

    PersonEntities Person { get; }

    RemoteEntities Remote { get; }

    ScriptEntities Script { get; }

    SensorEntities Sensor { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    UpdateEntities Update { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CalendarEntities Calendar => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public InputNumberEntities InputNumber => new(_haContext);
    public InputSelectEntities InputSelect => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public RemoteEntities Remote => new(_haContext);
    public ScriptEntities Script => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Backyard Access Point</summary>
    public LightEntity BackyardAccessPoint => new(_haContext, "light.backyard_access_point");
    ///<summary>Family Room Access Point</summary>
    public LightEntity FamilyRoomAccessPoint => new(_haContext, "light.family_room_access_point");
    ///<summary>Garage Access Point</summary>
    public LightEntity GarageAccessPoint => new(_haContext, "light.garage_access_point");
    ///<summary>Master Bedroom Access Point</summary>
    public LightEntity MasterBedroomAccessPoint => new(_haContext, "light.master_bedroom_access_point");
    ///<summary>Office Access Point</summary>
    public LightEntity OfficeAccessPoint => new(_haContext, "light.office_access_point");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Samsung Frame (55)</summary>
    public MediaPlayerEntity SamsungFrame55 => new(_haContext, "media_player.samsung_frame_55");
    ///<summary>[TV] Samsung Frame (55)</summary>
    public MediaPlayerEntity TvSamsungFrame55 => new(_haContext, "media_player.tv_samsung_frame_55");
    ///<summary>Xbox-SystemOS</summary>
    public MediaPlayerEntity XboxSystemos => new(_haContext, "media_player.xbox_systemos");
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Check Temperature of DB1 Reservoir</summary>
    public AutomationEntity CheckTemperatureOfDb1Reservoir => new(_haContext, "automation.check_temperature_of_db1_reservoir");
    ///<summary>Db1 Watering Pump</summary>
    public AutomationEntity Db1WateringPump => new(_haContext, "automation.db1_watering_pump");
    ///<summary>Db2 Watering Pump</summary>
    public AutomationEntity Db2WateringPump => new(_haContext, "automation.db2_watering_pump");
    ///<summary>Db5 Watering Pump</summary>
    public AutomationEntity Db3WateringPump => new(_haContext, "automation.db3_watering_pump");
    ///<summary>Db3 Watering Pump </summary>
    public AutomationEntity Db3WateringPump2 => new(_haContext, "automation.db3_watering_pump_2");
    ///<summary>Db4 Watering Pump </summary>
    public AutomationEntity Db4WateringPump => new(_haContext, "automation.db4_watering_pump");
    ///<summary>Db6 Watering Pump</summary>
    public AutomationEntity Db6WateringPump => new(_haContext, "automation.db6_watering_pump");
    ///<summary>Heater Try 2</summary>
    public AutomationEntity HeaterTry2 => new(_haContext, "automation.heater_try_2");
    ///<summary>Octoprint Notification</summary>
    public AutomationEntity OctoprintNotification => new(_haContext, "automation.octoprint_notification");
    ///<summary>Temporary Co2 and hear</summary>
    public AutomationEntity TemporaryCo2AndHear => new(_haContext, "automation.temporary_co2_and_hear");
    ///<summary>test</summary>
    public AutomationEntity Test => new(_haContext, "automation.test");
    ///<summary>Turn Off Co2</summary>
    public AutomationEntity TurnOffCo2 => new(_haContext, "automation.turn_off_co2");
    ///<summary>Turn off Grow Light at night</summary>
    public AutomationEntity TurnOffGrowLight => new(_haContext, "automation.turn_off_grow_light");
    ///<summary>Turn Off Grow Light in the Mornining</summary>
    public AutomationEntity TurnOffGrowLightInTheMornining => new(_haContext, "automation.turn_off_grow_light_in_the_mornining");
    ///<summary>Turn on Circulating Fan ever 4 hours</summary>
    public AutomationEntity TurnOnCirculatingFanEver4Hours => new(_haContext, "automation.turn_on_circulating_fan_ever_4_hours");
    ///<summary>Turn on DB2 pump every hour for 7.5 min</summary>
    public AutomationEntity TurnOnDb2PumpEvery4Hours => new(_haContext, "automation.turn_on_db2_pump_every_4_hours");
    ///<summary>Turn on Grow Light in the Morning</summary>
    public AutomationEntity TurnOnGrowLight => new(_haContext, "automation.turn_on_grow_light");
    ///<summary>Turn on Grow Light 4 before Sunset</summary>
    public AutomationEntity TurnOnGrowLight42 => new(_haContext, "automation.turn_on_grow_light_4_2");
    ///<summary>Turn on Grow Light DB1 and 2 before Sunset</summary>
    public AutomationEntity TurnOnGrowLightDb1And2BeforeSunset => new(_haContext, "automation.turn_on_grow_light_db1_and_2_before_sunset");
    ///<summary>Turn on nft pump every 2 hours</summary>
    public AutomationEntity TurnOnNftPump => new(_haContext, "automation.turn_on_nft_pump");
    ///<summary>Watermeterkit Meter Value</summary>
    public AutomationEntity WatermeterkitMeterValue => new(_haContext, "automation.watermeterkit_meter_value");
    ///<summary>Write Stepper Value to ESP</summary>
    public AutomationEntity WriteStepperValueToEsp => new(_haContext, "automation.write_stepper_value_to_esp");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>auto_off_for_water_filler</summary>
    public BinarySensorEntity AutoOffForWaterFiller => new(_haContext, "binary_sensor.auto_off_for_water_filler");
    ///<summary>auto_off_for_water_filler</summary>
    public BinarySensorEntity AutoOffForWaterFiller2 => new(_haContext, "binary_sensor.auto_off_for_water_filler_2");
    ///<summary>auto_off_for_water_filler</summary>
    public BinarySensorEntity AutoOffForWaterFiller3 => new(_haContext, "binary_sensor.auto_off_for_water_filler_3");
    ///<summary>Back Light Status</summary>
    public BinarySensorEntity BackLightStatus => new(_haContext, "binary_sensor.back_light_status");
    ///<summary>Backyard Access Point</summary>
    public BinarySensorEntity BackyardAccessPoint => new(_haContext, "binary_sensor.backyard_access_point");
    ///<summary>DB1 Res Empty</summary>
    public BinarySensorEntity Db1ResEmpty => new(_haContext, "binary_sensor.db1_res_empty");
    ///<summary>DB1 Res Full</summary>
    public BinarySensorEntity Db1ResFull => new(_haContext, "binary_sensor.db1_res_full");
    ///<summary>DB1 Res Medium</summary>
    public BinarySensorEntity Db1ResMedium => new(_haContext, "binary_sensor.db1_res_medium");
    ///<summary>DB1 Water Level Status</summary>
    public BinarySensorEntity Db1WaterLevelStatus => new(_haContext, "binary_sensor.db1_water_level_status");
    ///<summary>DB2 Res Empty</summary>
    public BinarySensorEntity Db2ResEmpty => new(_haContext, "binary_sensor.db2_res_empty");
    ///<summary>DB2 Res Full</summary>
    public BinarySensorEntity Db2ResFull => new(_haContext, "binary_sensor.db2_res_full");
    ///<summary>DB2 Res Medium</summary>
    public BinarySensorEntity Db2ResMedium => new(_haContext, "binary_sensor.db2_res_medium");
    ///<summary>DB2 Water Level Status</summary>
    public BinarySensorEntity Db2WaterLevelStatus => new(_haContext, "binary_sensor.db2_water_level_status");
    ///<summary>DB5 Res Empty</summary>
    public BinarySensorEntity Db3ResEmpty => new(_haContext, "binary_sensor.db3_res_empty");
    ///<summary>DB5 Res Full</summary>
    public BinarySensorEntity Db3ResFull => new(_haContext, "binary_sensor.db3_res_full");
    ///<summary>DB5 Res Medium</summary>
    public BinarySensorEntity Db3ResMedium => new(_haContext, "binary_sensor.db3_res_medium");
    ///<summary>DB3 Water Level Status</summary>
    public BinarySensorEntity Db3WaterLevelStatus => new(_haContext, "binary_sensor.db3_water_level_status");
    ///<summary>DB4 Res Empty</summary>
    public BinarySensorEntity Db4ResEmpty => new(_haContext, "binary_sensor.db4_res_empty");
    ///<summary>DB4 Res Full</summary>
    public BinarySensorEntity Db4ResFull => new(_haContext, "binary_sensor.db4_res_full");
    ///<summary>DB4 Res Medium</summary>
    public BinarySensorEntity Db4ResMedium => new(_haContext, "binary_sensor.db4_res_medium");
    ///<summary>DB4 Water Level Status</summary>
    public BinarySensorEntity Db4WaterLevelStatus => new(_haContext, "binary_sensor.db4_water_level_status");
    ///<summary>DB3 Res Empty</summary>
    public BinarySensorEntity Db5ResEmpty => new(_haContext, "binary_sensor.db5_res_empty");
    ///<summary>DB3 Res Full</summary>
    public BinarySensorEntity Db5ResFull => new(_haContext, "binary_sensor.db5_res_full");
    ///<summary>DB3 Res Medium</summary>
    public BinarySensorEntity Db5ResMedium => new(_haContext, "binary_sensor.db5_res_medium");
    ///<summary>DB5 Water Level Status</summary>
    public BinarySensorEntity Db5WaterLevelStatus => new(_haContext, "binary_sensor.db5_water_level_status");
    ///<summary>DB6 Res Empty</summary>
    public BinarySensorEntity Db6ResEmpty => new(_haContext, "binary_sensor.db6_res_empty");
    ///<summary>DB6 Res Full</summary>
    public BinarySensorEntity Db6ResFull => new(_haContext, "binary_sensor.db6_res_full");
    ///<summary>DB6 Res Medium</summary>
    public BinarySensorEntity Db6ResMedium => new(_haContext, "binary_sensor.db6_res_medium");
    ///<summary>DB6 Water Level Status</summary>
    public BinarySensorEntity Db6WaterLevelStatus => new(_haContext, "binary_sensor.db6_water_level_status");
    ///<summary>espcam01_button</summary>
    public BinarySensorEntity Espcam01Button => new(_haContext, "binary_sensor.espcam01_button");
    ///<summary>espcam01_pir</summary>
    public BinarySensorEntity Espcam01Pir => new(_haContext, "binary_sensor.espcam01_pir");
    ///<summary>Family Room Access Point</summary>
    public BinarySensorEntity FamilyRoomAccessPoint => new(_haContext, "binary_sensor.family_room_access_point");
    ///<summary>Fan Button</summary>
    public BinarySensorEntity FanButton => new(_haContext, "binary_sensor.fan_button");
    ///<summary>Fan Status</summary>
    public BinarySensorEntity FanStatus => new(_haContext, "binary_sensor.fan_status");
    ///<summary>Fresh Res Empty</summary>
    public BinarySensorEntity FreshResEmpty => new(_haContext, "binary_sensor.fresh_res_empty");
    ///<summary>Fresh Res Full</summary>
    public BinarySensorEntity FreshResFull => new(_haContext, "binary_sensor.fresh_res_full");
    ///<summary>Fresh Res Medium</summary>
    public BinarySensorEntity FreshResMedium => new(_haContext, "binary_sensor.fresh_res_medium");
    ///<summary>Fresh Res Water Level Status</summary>
    public BinarySensorEntity FreshResWaterLevelStatus => new(_haContext, "binary_sensor.fresh_res_water_level_status");
    ///<summary>Fresh Water Empty</summary>
    public BinarySensorEntity FreshWaterEmpty => new(_haContext, "binary_sensor.fresh_water_empty");
    ///<summary>Fresh Water Full</summary>
    public BinarySensorEntity FreshWaterFull => new(_haContext, "binary_sensor.fresh_water_full");
    ///<summary>Fresh Water Level State</summary>
    public BinarySensorEntity FreshWaterLevelState => new(_haContext, "binary_sensor.fresh_water_level_state");
    ///<summary>Fresh Water Medium</summary>
    public BinarySensorEntity FreshWaterMedium => new(_haContext, "binary_sensor.fresh_water_medium");
    ///<summary>Front Light Button</summary>
    public BinarySensorEntity FrontLightButton => new(_haContext, "binary_sensor.front_light_button");
    ///<summary>Front Light Status</summary>
    public BinarySensorEntity FrontLightStatus => new(_haContext, "binary_sensor.front_light_status");
    ///<summary>Garage Access Point</summary>
    public BinarySensorEntity GarageAccessPoint => new(_haContext, "binary_sensor.garage_access_point");
    ///<summary>GH Back Light State</summary>
    public BinarySensorEntity GhBackLightState => new(_haContext, "binary_sensor.gh_back_light_state");
    ///<summary>Google Wifi System AAAAABycHeI</summary>
    public BinarySensorEntity GoogleWifiSystemAaaaabychei => new(_haContext, "binary_sensor.google_wifi_system_aaaaabychei");
    ///<summary>Master Bedroom Access Point</summary>
    public BinarySensorEntity MasterBedroomAccessPoint => new(_haContext, "binary_sensor.master_bedroom_access_point");
    ///<summary>NFT Res Empty</summary>
    public BinarySensorEntity NftResEmpty => new(_haContext, "binary_sensor.nft_res_empty");
    ///<summary>NFT Res Full</summary>
    public BinarySensorEntity NftResFull => new(_haContext, "binary_sensor.nft_res_full");
    ///<summary>NFT Res Medium</summary>
    public BinarySensorEntity NftResMedium => new(_haContext, "binary_sensor.nft_res_medium");
    ///<summary>NFT Water Level Status</summary>
    public BinarySensorEntity NftWaterLevelStatus => new(_haContext, "binary_sensor.nft_water_level_status");
    ///<summary>OctoPrint Printing</summary>
    public BinarySensorEntity OctoprintPrinting => new(_haContext, "binary_sensor.octoprint_printing");
    ///<summary>OctoPrint Printing Error</summary>
    public BinarySensorEntity OctoprintPrintingError => new(_haContext, "binary_sensor.octoprint_printing_error");
    ///<summary>Office Access Point</summary>
    public BinarySensorEntity OfficeAccessPoint => new(_haContext, "binary_sensor.office_access_point");
    ///<summary>Power Strip 1 Button</summary>
    public BinarySensorEntity PowerStrip1Button => new(_haContext, "binary_sensor.power_strip_1_button");
    ///<summary>Power Strip 1 Server Status</summary>
    public BinarySensorEntity PowerStrip1ServerStatus => new(_haContext, "binary_sensor.power_strip_1_server_status");
    ///<summary>Remote UI</summary>
    public BinarySensorEntity RemoteUi => new(_haContext, "binary_sensor.remote_ui");
    ///<summary>RPi Power status</summary>
    public BinarySensorEntity RpiPowerStatus => new(_haContext, "binary_sensor.rpi_power_status");
    ///<summary>SamsungFlex Is charging</summary>
    public BinarySensorEntity SamsungflexIsCharging => new(_haContext, "binary_sensor.samsungflex_is_charging");
    ///<summary>Station 1 Status</summary>
    public BinarySensorEntity Station1Status => new(_haContext, "binary_sensor.station_1_status");
    ///<summary>Station 2 Status</summary>
    public BinarySensorEntity Station2Status => new(_haContext, "binary_sensor.station_2_status");
    ///<summary>Station 3 Status</summary>
    public BinarySensorEntity Station3Status => new(_haContext, "binary_sensor.station_3_status");
    ///<summary>Station 4 Status</summary>
    public BinarySensorEntity Station4Status => new(_haContext, "binary_sensor.station_4_status");
    ///<summary>Station 4 Status</summary>
    public BinarySensorEntity Station4Status2 => new(_haContext, "binary_sensor.station_4_status_2");
    ///<summary>Swp Cool W Level Status</summary>
    public BinarySensorEntity SwpCoolWLevelStatus => new(_haContext, "binary_sensor.swp_cool_w_level_status");
    ///<summary>SWP Res Empty</summary>
    public BinarySensorEntity SwpResEmpty => new(_haContext, "binary_sensor.swp_res_empty");
    ///<summary>SWP Res Full</summary>
    public BinarySensorEntity SwpResFull => new(_haContext, "binary_sensor.swp_res_full");
    ///<summary>SWP Res Medium</summary>
    public BinarySensorEntity SwpResMedium => new(_haContext, "binary_sensor.swp_res_medium");
    ///<summary>Test Node W Level Status</summary>
    public BinarySensorEntity TestNodeWLevelStatus => new(_haContext, "binary_sensor.test_node_w_level_status");
    ///<summary>Testing Bucket 4ch Status</summary>
    public BinarySensorEntity TestingBucket4chStatus => new(_haContext, "binary_sensor.testing_bucket_4ch_status");
    ///<summary>Tn Res Empty</summary>
    public BinarySensorEntity TnResEmpty => new(_haContext, "binary_sensor.tn_res_empty");
    ///<summary>Tn Res Full</summary>
    public BinarySensorEntity TnResFull => new(_haContext, "binary_sensor.tn_res_full");
    ///<summary>Tn Res Medium</summary>
    public BinarySensorEntity TnResMedium => new(_haContext, "binary_sensor.tn_res_medium");
    ///<summary>Updater</summary>
    public BinarySensorEntity Updater => new(_haContext, "binary_sensor.updater");
    ///<summary>Valve 2 Closed</summary>
    public BinarySensorEntity Valve2Closed => new(_haContext, "binary_sensor.valve_2_closed");
    ///<summary>Valve 2 Open</summary>
    public BinarySensorEntity Valve2Open => new(_haContext, "binary_sensor.valve_2_open");
    ///<summary>Valve Closed</summary>
    public BinarySensorEntity ValveClosed => new(_haContext, "binary_sensor.valve_closed");
    ///<summary>Valve Open</summary>
    public BinarySensorEntity ValveOpen => new(_haContext, "binary_sensor.valve_open");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>OctoPrint Pause Job</summary>
    public ButtonEntity OctoprintPauseJob => new(_haContext, "button.octoprint_pause_job");
    ///<summary>OctoPrint Resume Job</summary>
    public ButtonEntity OctoprintResumeJob => new(_haContext, "button.octoprint_resume_job");
    ///<summary>OctoPrint Stop Job</summary>
    public ButtonEntity OctoprintStopJob => new(_haContext, "button.octoprint_stop_job");
}

public partial class CalendarEntities
{
    private readonly IHaContext _haContext;
    public CalendarEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Beach days</summary>
    public CalendarEntity BeachDays => new(_haContext, "calendar.beach_days");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>espcam01</summary>
    public CameraEntity Espcam01 => new(_haContext, "camera.espcam01");
    ///<summary>OctoPrint</summary>
    public CameraEntity Octoprint => new(_haContext, "camera.octoprint");
    ///<summary>OctoPrint Camera</summary>
    public CameraEntity OctoprintCamera => new(_haContext, "camera.octoprint_camera");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>balena Pi4 (Raspberry Pi)</summary>
    public DeviceTrackerEntity _139976bRaspberryPi => new(_haContext, "device_tracker.139976b_raspberry_pi");
    ///<summary>2070b20 (Raspberry Pi)</summary>
    public DeviceTrackerEntity _2070b20RaspberryPi => new(_haContext, "device_tracker.2070b20_raspberry_pi");
    ///<summary>Bap (Raspberry Pi)</summary>
    public DeviceTrackerEntity _98a696bRaspberryPi => new(_haContext, "device_tracker.98a696b_raspberry_pi");
    ///<summary>9d6de1b (Raspberry Pi)</summary>
    public DeviceTrackerEntity _9d6de1bRaspberryPi => new(_haContext, "device_tracker.9d6de1b_raspberry_pi");
    ///<summary>a1b4331</summary>
    public DeviceTrackerEntity A1b4331 => new(_haContext, "device_tracker.a1b4331");
    ///<summary>a1b4331 (Raspberry Pi)</summary>
    public DeviceTrackerEntity A1b4331RaspberryPi => new(_haContext, "device_tracker.a1b4331_raspberry_pi");
    ///<summary>a55e6ac (Raspberry Pi)</summary>
    public DeviceTrackerEntity A55e6acRaspberryPi => new(_haContext, "device_tracker.a55e6ac_raspberry_pi");
    ///<summary>Allisons-iPhone</summary>
    public DeviceTrackerEntity AllisonsIphone => new(_haContext, "device_tracker.allisons_iphone");
    ///<summary>Allisons-iPhone-13</summary>
    public DeviceTrackerEntity AllisonsIphone13 => new(_haContext, "device_tracker.allisons_iphone_13");
    ///<summary>Amazon Android device (Amazon)</summary>
    public DeviceTrackerEntity AmazonA2bc345cbAmazonAndroidDevice => new(_haContext, "device_tracker.amazon_a2bc345cb_amazon_android_device");
    ///<summary>amazon-a2bc345cb (Amazon Android device)</summary>
    public DeviceTrackerEntity AmazonA2bc345cbLanAmazonAndroidDevice => new(_haContext, "device_tracker.amazon_a2bc345cb_lan_amazon_android_device");
    ///<summary>Amazon Kindle (Amazon)</summary>
    public DeviceTrackerEntity AmazonKindleAmazon => new(_haContext, "device_tracker.amazon_kindle_amazon");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity Android2 => new(_haContext, "device_tracker.android_2");
    ///<summary>Android (Amazon Android device)</summary>
    public DeviceTrackerEntity AndroidAmazonAndroidDevice => new(_haContext, "device_tracker.android_amazon_android_device");
    ///<summary>Samsung Android device (Samsung)</summary>
    public DeviceTrackerEntity AndroidSamsungAndroidDevice => new(_haContext, "device_tracker.android_samsung_android_device");
    ///<summary>B5178A9E5</summary>
    public DeviceTrackerEntity B5178a9e5 => new(_haContext, "device_tracker.b5178a9e5");
    ///<summary>CL-LAP-24 (Windows device)</summary>
    public DeviceTrackerEntity ClLap24WindowsDevice => new(_haContext, "device_tracker.cl_lap_24_windows_device");
    ///<summary>co2sensor</summary>
    public DeviceTrackerEntity Co2sensor => new(_haContext, "device_tracker.co2sensor");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity Cody => new(_haContext, "device_tracker.cody");
    ///<summary>db1_water_level</summary>
    public DeviceTrackerEntity Db1WaterLevel => new(_haContext, "device_tracker.db1_water_level");
    ///<summary>db2_water_level</summary>
    public DeviceTrackerEntity Db2WaterLevel => new(_haContext, "device_tracker.db2_water_level");
    ///<summary>db3_water_level</summary>
    public DeviceTrackerEntity Db3WaterLevel => new(_haContext, "device_tracker.db3_water_level");
    ///<summary>db4_water_level</summary>
    public DeviceTrackerEntity Db4WaterLevel => new(_haContext, "device_tracker.db4_water_level");
    ///<summary>db5_water_level</summary>
    public DeviceTrackerEntity Db5WaterLevel => new(_haContext, "device_tracker.db5_water_level");
    ///<summary>db6_water_level</summary>
    public DeviceTrackerEntity Db6WaterLevel => new(_haContext, "device_tracker.db6_water_level");
    ///<summary>DESKTOP-4KPKKLJ (Windows device)</summary>
    public DeviceTrackerEntity Desktop4kpkkljWindowsDevice => new(_haContext, "device_tracker.desktop_4kpkklj_windows_device");
    ///<summary>DESKTOP-VL1SBG5 (Windows device)</summary>
    public DeviceTrackerEntity DesktopVl1sbg5WindowsDevice => new(_haContext, "device_tracker.desktop_vl1sbg5_windows_device");
    ///<summary>Diane-s-S22</summary>
    public DeviceTrackerEntity DianeSS22 => new(_haContext, "device_tracker.diane_s_s22");
    ///<summary>Windows device</summary>
    public DeviceTrackerEntity Dianesurface8WindowsDevice => new(_haContext, "device_tracker.dianesurface8_windows_device");
    ///<summary>EPSOND97AE7 (Epson Printer)</summary>
    public DeviceTrackerEntity Epsond97ae7EpsonPrinter => new(_haContext, "device_tracker.epsond97ae7_epson_printer");
    ///<summary>ESP_76FAF5</summary>
    public DeviceTrackerEntity Esp76faf5 => new(_haContext, "device_tracker.esp_76faf5");
    ///<summary>fresh_res_water_level</summary>
    public DeviceTrackerEntity FreshResWaterLevel => new(_haContext, "device_tracker.fresh_res_water_level");
    ///<summary>Android-2</summary>
    public DeviceTrackerEntity GalaxyS22 => new(_haContext, "device_tracker.galaxy_s22");
    ///<summary>gh_camera</summary>
    public DeviceTrackerEntity GhCamera => new(_haContext, "device_tracker.gh_camera");
    ///<summary>ghbacklight</summary>
    public DeviceTrackerEntity Ghbacklight => new(_haContext, "device_tracker.ghbacklight");
    ///<summary>ghlightfront</summary>
    public DeviceTrackerEntity Ghlightfront => new(_haContext, "device_tracker.ghlightfront");
    ///<summary>ghtemp2</summary>
    public DeviceTrackerEntity Ghtemp2 => new(_haContext, "device_tracker.ghtemp2");
    ///<summary>greenhousetemp</summary>
    public DeviceTrackerEntity Greenhousetemp => new(_haContext, "device_tracker.greenhousetemp");
    ///<summary>Home (Home Assistant OS)</summary>
    public DeviceTrackerEntity HomeassistantRaspberryPi => new(_haContext, "device_tracker.homeassistant_raspberry_pi");
    ///<summary>iPad</summary>
    public DeviceTrackerEntity Ipad => new(_haContext, "device_tracker.ipad");
    ///<summary>iPhone-4</summary>
    public DeviceTrackerEntity Iphone4 => new(_haContext, "device_tracker.iphone_4");
    ///<summary>Kimberlys-iPad</summary>
    public DeviceTrackerEntity KimberlysIpad => new(_haContext, "device_tracker.kimberlys_ipad");
    ///<summary>Windows device</summary>
    public DeviceTrackerEntity KtWorkWindowsDevice => new(_haContext, "device_tracker.kt_work_windows_device");
    ///<summary>L08643 (Windows device)</summary>
    public DeviceTrackerEntity L08643WindowsDevice => new(_haContext, "device_tracker.l08643_windows_device");
    ///<summary>Windows device</summary>
    public DeviceTrackerEntity L08779WindowsDevice => new(_haContext, "device_tracker.l08779_windows_device");
    ///<summary>L08987 (Windows device)</summary>
    public DeviceTrackerEntity L08987WindowsDevice => new(_haContext, "device_tracker.l08987_windows_device");
    ///<summary>Windows device</summary>
    public DeviceTrackerEntity LaptopSulf1m3lWindowsDevice => new(_haContext, "device_tracker.laptop_sulf1m3l_windows_device");
    ///<summary>Laurie</summary>
    public DeviceTrackerEntity Laurie => new(_haContext, "device_tracker.laurie");
    ///<summary>Laurie-2</summary>
    public DeviceTrackerEntity Laurie2 => new(_haContext, "device_tracker.laurie_2");
    ///<summary>Laurie-2</summary>
    public DeviceTrackerEntity Laurie22 => new(_haContext, "device_tracker.laurie_2_2");
    ///<summary>Laurie</summary>
    public DeviceTrackerEntity Laurie3 => new(_haContext, "device_tracker.laurie_3");
    ///<summary>LG</summary>
    public DeviceTrackerEntity Lg => new(_haContext, "device_tracker.lg");
    ///<summary>Lindas-MacBook-Air (Apple)</summary>
    public DeviceTrackerEntity LindasMacbookAirApple => new(_haContext, "device_tracker.lindas_macbook_air_apple");
    ///<summary>Master (Chromecast)</summary>
    public DeviceTrackerEntity MasterChromecast => new(_haContext, "device_tracker.master_chromecast");
    ///<summary>Microsoft</summary>
    public DeviceTrackerEntity Microsoft => new(_haContext, "device_tracker.microsoft");
    ///<summary>MightySongs</summary>
    public DeviceTrackerEntity Mighty36 => new(_haContext, "device_tracker.mighty_36");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity MollysIpad => new(_haContext, "device_tracker.mollys_ipad");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity MollysIphone => new(_haContext, "device_tracker.mollys_iphone");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity MollysIphone2 => new(_haContext, "device_tracker.mollys_iphone_2");
    ///<summary>Jakes-iPhone</summary>
    public DeviceTrackerEntity MontzingosIphone => new(_haContext, "device_tracker.montzingos_iphone");
    ///<summary>Motorola Android device (Motorola)</summary>
    public DeviceTrackerEntity MotorolaAndroidDeviceMotorola => new(_haContext, "device_tracker.motorola_android_device_motorola");
    ///<summary>Motorola Android device (Motorola)</summary>
    public DeviceTrackerEntity MotorolaAndroidDeviceMotorola2 => new(_haContext, "device_tracker.motorola_android_device_motorola_2");
    ///<summary>myx_00186156838* (Ooma)</summary>
    public DeviceTrackerEntity Myx00186156838Ooma => new(_haContext, "device_tracker.myx_00186156838_ooma");
    ///<summary>Nest Thermostat (Google)</summary>
    public DeviceTrackerEntity NestThermostatGoogle => new(_haContext, "device_tracker.nest_thermostat_google");
    ///<summary>nft_water_level</summary>
    public DeviceTrackerEntity NftWaterLevel => new(_haContext, "device_tracker.nft_water_level");
    ///<summary>NGELOTTE (Windows device)</summary>
    public DeviceTrackerEntity NgelotteWindowsDevice => new(_haContext, "device_tracker.ngelotte_windows_device");
    ///<summary>NGELOTTE (Windows device)</summary>
    public DeviceTrackerEntity NgelotteWindowsDevice2 => new(_haContext, "device_tracker.ngelotte_windows_device_2");
    ///<summary>NGELOTTE10 (Dell)</summary>
    public DeviceTrackerEntity Ngelotte10ltDell => new(_haContext, "device_tracker.ngelotte10lt_dell");
    ///<summary>Dell</summary>
    public DeviceTrackerEntity Ngelotte10ltDell2 => new(_haContext, "device_tracker.ngelotte10lt_dell_2");
    ///<summary>NGELOTTE10 (Windows device)</summary>
    public DeviceTrackerEntity Ngelotte10ltWindowsDevice => new(_haContext, "device_tracker.ngelotte10lt_windows_device");
    ///<summary>Nicholas&apos;s Fire TV (AFTMM)</summary>
    public DeviceTrackerEntity NicholasSFireTvAftmm => new(_haContext, "device_tracker.nicholas_s_fire_tv_aftmm");
    ///<summary>Nintendo Switch (Nintendo)</summary>
    public DeviceTrackerEntity NintendoSwitchNintendo => new(_haContext, "device_tracker.nintendo_switch_nintendo");
    ///<summary>Nintendo Switch (Nintendo)</summary>
    public DeviceTrackerEntity NintendoSwitchNintendo2 => new(_haContext, "device_tracker.nintendo_switch_nintendo_2");
    ///<summary>Nintendo Switch (Nintendo)</summary>
    public DeviceTrackerEntity NintendoSwitchNintendo3 => new(_haContext, "device_tracker.nintendo_switch_nintendo_3");
    ///<summary>Nintendo Switch (Nintendo)</summary>
    public DeviceTrackerEntity NintendoSwitchNintendo4 => new(_haContext, "device_tracker.nintendo_switch_nintendo_4");
    ///<summary>Nuheat</summary>
    public DeviceTrackerEntity Nuheat => new(_haContext, "device_tracker.nuheat");
    ///<summary>OctoPrint instance on octopi (1.9.2)</summary>
    public DeviceTrackerEntity OctopiRaspberryPi => new(_haContext, "device_tracker.octopi_raspberry_pi");
    ///<summary>OctoPrint instance on octopi (1.9.3)</summary>
    public DeviceTrackerEntity OctopiRaspberryPi2 => new(_haContext, "device_tracker.octopi_raspberry_pi_2");
    ///<summary>peristalticnutrients</summary>
    public DeviceTrackerEntity Peristalticnutrients => new(_haContext, "device_tracker.peristalticnutrients");
    ///<summary>Pixel-5</summary>
    public DeviceTrackerEntity Pixel5 => new(_haContext, "device_tracker.pixel_5");
    ///<summary>powerstrip_mid</summary>
    public DeviceTrackerEntity PowerstripMid => new(_haContext, "device_tracker.powerstrip_mid");
    ///<summary>powerstripne</summary>
    public DeviceTrackerEntity Powerstripne => new(_haContext, "device_tracker.powerstripne");
    ///<summary>powerstriptestzone</summary>
    public DeviceTrackerEntity Powerstriptestzone => new(_haContext, "device_tracker.powerstriptestzone");
    ///<summary>pwstrip1</summary>
    public DeviceTrackerEntity Pwstrip1 => new(_haContext, "device_tracker.pwstrip1");
    ///<summary>RIPL-d017691e362*</summary>
    public DeviceTrackerEntity RiplD017691e362 => new(_haContext, "device_tracker.ripl_d017691e362");
    ///<summary>Samsung-2 (Samsung)</summary>
    public DeviceTrackerEntity Samsung => new(_haContext, "device_tracker.samsung");
    ///<summary>Samsung</summary>
    public DeviceTrackerEntity Samsung2 => new(_haContext, "device_tracker.samsung_2");
    ///<summary>Samsung flex</summary>
    public DeviceTrackerEntity SamsungFlex => new(_haContext, "device_tracker.samsung_flex");
    ///<summary>SamsungFlex</summary>
    public DeviceTrackerEntity Samsungflex => new(_haContext, "device_tracker.samsungflex");
    ///<summary>sbasic1</summary>
    public DeviceTrackerEntity Sbasic1 => new(_haContext, "device_tracker.sbasic1");
    ///<summary>sonoff4chz1</summary>
    public DeviceTrackerEntity Sonoff4chz1 => new(_haContext, "device_tracker.sonoff4chz1");
    ///<summary>sonoff4chz2</summary>
    public DeviceTrackerEntity Sonoff4chz2 => new(_haContext, "device_tracker.sonoff4chz2");
    ///<summary>sonoff4chz3</summary>
    public DeviceTrackerEntity Sonoff4chz3 => new(_haContext, "device_tracker.sonoff4chz3");
    ///<summary>sorterHost (Dell)</summary>
    public DeviceTrackerEntity SorterhostDell => new(_haContext, "device_tracker.sorterhost_dell");
    ///<summary>station4</summary>
    public DeviceTrackerEntity Station4 => new(_haContext, "device_tracker.station4");
    ///<summary>swp_cool_water_level</summary>
    public DeviceTrackerEntity SwpCoolWaterLevel => new(_haContext, "device_tracker.swp_cool_water_level");
    ///<summary>swp_cool_water_level</summary>
    public DeviceTrackerEntity SwpCoolWaterLevel2 => new(_haContext, "device_tracker.swp_cool_water_level_2");
    public DeviceTrackerEntity TegraUbuntu501e => new(_haContext, "device_tracker.tegra_ubuntu_501e");
    ///<summary>test_node_water_level</summary>
    public DeviceTrackerEntity TestNodeWaterLevel => new(_haContext, "device_tracker.test_node_water_level");
    ///<summary>testingbucketsf4ch</summary>
    public DeviceTrackerEntity Testingbucketsf4ch => new(_haContext, "device_tracker.testingbucketsf4ch");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice => new(_haContext, "device_tracker.unnamed_device");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice10 => new(_haContext, "device_tracker.unnamed_device_10");
    ///<summary>im-watching-you</summary>
    public DeviceTrackerEntity UnnamedDevice11 => new(_haContext, "device_tracker.unnamed_device_11");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice12 => new(_haContext, "device_tracker.unnamed_device_12");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice13 => new(_haContext, "device_tracker.unnamed_device_13");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice14 => new(_haContext, "device_tracker.unnamed_device_14");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice15 => new(_haContext, "device_tracker.unnamed_device_15");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice16 => new(_haContext, "device_tracker.unnamed_device_16");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice17 => new(_haContext, "device_tracker.unnamed_device_17");
    ///<summary>Mollys-iPhone</summary>
    public DeviceTrackerEntity UnnamedDevice18 => new(_haContext, "device_tracker.unnamed_device_18");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice19 => new(_haContext, "device_tracker.unnamed_device_19");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice2 => new(_haContext, "device_tracker.unnamed_device_2");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice20 => new(_haContext, "device_tracker.unnamed_device_20");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice21 => new(_haContext, "device_tracker.unnamed_device_21");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice22 => new(_haContext, "device_tracker.unnamed_device_22");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice23 => new(_haContext, "device_tracker.unnamed_device_23");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice24 => new(_haContext, "device_tracker.unnamed_device_24");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice3 => new(_haContext, "device_tracker.unnamed_device_3");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice4 => new(_haContext, "device_tracker.unnamed_device_4");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice5 => new(_haContext, "device_tracker.unnamed_device_5");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice6 => new(_haContext, "device_tracker.unnamed_device_6");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice7 => new(_haContext, "device_tracker.unnamed_device_7");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice8 => new(_haContext, "device_tracker.unnamed_device_8");
    ///<summary>Unnamed device</summary>
    public DeviceTrackerEntity UnnamedDevice9 => new(_haContext, "device_tracker.unnamed_device_9");
    ///<summary>VMB4000 (Netgear)</summary>
    public DeviceTrackerEntity Vmb4000Netgear => new(_haContext, "device_tracker.vmb4000_netgear");
    ///<summary>watermonitor</summary>
    public DeviceTrackerEntity Watermonitor => new(_haContext, "device_tracker.watermonitor");
    ///<summary>WiFiAP</summary>
    public DeviceTrackerEntity Wifiap => new(_haContext, "device_tracker.wifiap");
    ///<summary>Windows device</summary>
    public DeviceTrackerEntity WindowsDevice => new(_haContext, "device_tracker.windows_device");
    ///<summary>Xbox-SystemOS (Xbox One)</summary>
    public DeviceTrackerEntity XboxSystemosXboxOne => new(_haContext, "device_tracker.xbox_systemos_xbox_one");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>netdaemon_nd_greenhouse_apps_greenhouse_environment_app</summary>
    public InputBooleanEntity NetdaemonNdGreenhouseAppsGreenhouseEnvironmentApp => new(_haContext, "input_boolean.netdaemon_nd_greenhouse_apps_greenhouse_environment_app");
    ///<summary>netdaemon_nd_greenhouse_apps_greenhouse_grow_light_app</summary>
    public InputBooleanEntity NetdaemonNdGreenhouseAppsGreenhouseGrowLightApp => new(_haContext, "input_boolean.netdaemon_nd_greenhouse_apps_greenhouse_grow_light_app");
    ///<summary>netdaemon_nd_greenhouse_apps_greenhouse_heat_and_co2app</summary>
    public InputBooleanEntity NetdaemonNdGreenhouseAppsGreenhouseHeatAndCo2app => new(_haContext, "input_boolean.netdaemon_nd_greenhouse_apps_greenhouse_heat_and_co2app");
    ///<summary>netdaemon_nd_greenhouse_apps_greenhouse_nutrients_app</summary>
    public InputBooleanEntity NetdaemonNdGreenhouseAppsGreenhouseNutrientsApp => new(_haContext, "input_boolean.netdaemon_nd_greenhouse_apps_greenhouse_nutrients_app");
    ///<summary>netdaemon_nd_greenhouse_apps_greenhouse_pir_lights_app</summary>
    public InputBooleanEntity NetdaemonNdGreenhouseAppsGreenhousePirLightsApp => new(_haContext, "input_boolean.netdaemon_nd_greenhouse_apps_greenhouse_pir_lights_app");
    ///<summary>netdaemon_nd_greenhouse_apps_greenhouse_refill_app</summary>
    public InputBooleanEntity NetdaemonNdGreenhouseAppsGreenhouseRefillApp => new(_haContext, "input_boolean.netdaemon_nd_greenhouse_apps_greenhouse_refill_app");
    ///<summary>Testing Tank Hold</summary>
    public InputBooleanEntity TestingTankHold => new(_haContext, "input_boolean.testing_tank_hold");
}

public partial class InputNumberEntities
{
    private readonly IHaContext _haContext;
    public InputNumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>NutrientUnitsToAdd</summary>
    public InputNumberEntity Nutrientunitstoadd => new(_haContext, "input_number.nutrientunitstoadd");
}

public partial class InputSelectEntities
{
    private readonly IHaContext _haContext;
    public InputSelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reservoir_reservation</summary>
    public InputSelectEntity ReservoirRes => new(_haContext, "input_select.reservoir_res");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Nick Gelotte</summary>
    public PersonEntity NickGelotte => new(_haContext, "person.nick_gelotte");
}

public partial class RemoteEntities
{
    private readonly IHaContext _haContext;
    public RemoteEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Samsung Frame (55)</summary>
    public RemoteEntity SamsungFrame55 => new(_haContext, "remote.samsung_frame_55");
}

public partial class ScriptEntities
{
    private readonly IHaContext _haContext;
    public ScriptEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Add dose to current zone</summary>
    public ScriptEntity AddDoseToCurrentZone => new(_haContext, "script.add_dose_to_current_zone");
    ///<summary>Move Pump 1</summary>
    public ScriptEntity MovePump1 => new(_haContext, "script.move_pump_1");
    ///<summary>Move Pump 2</summary>
    public ScriptEntity MovePump2 => new(_haContext, "script.move_pump_2");
    ///<summary>Move Pump 3</summary>
    public ScriptEntity MovePump3 => new(_haContext, "script.move_pump_3");
    ///<summary>Refill Current Bucket</summary>
    public ScriptEntity RefillCurrentBucket => new(_haContext, "script.refill_current_bucket");
    ///<summary>Refill Fresh Water Tank</summary>
    public ScriptEntity RefillFreshWaterTank => new(_haContext, "script.refill_fresh_water_tank");
    ///<summary>Refill Swp Cooler</summary>
    public ScriptEntity RefillSwpCooler => new(_haContext, "script.refill_swp_cooler");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>DB1 EC</summary>
    public SensorEntity Db1Ec => new(_haContext, "sensor.db1_ec");
    ///<summary>DB1 temp</summary>
    public SensorEntity Db1Temp => new(_haContext, "sensor.db1_temp");
    ///<summary>DB1 Water Level State</summary>
    public SensorEntity Db1WaterLevelState => new(_haContext, "sensor.db1_water_level_state");
    ///<summary>DB2 EC</summary>
    public SensorEntity Db2Ec => new(_haContext, "sensor.db2_ec");
    ///<summary>DB2 Temp</summary>
    public SensorEntity Db2Temp => new(_haContext, "sensor.db2_temp");
    ///<summary>DB2 Water Level State</summary>
    public SensorEntity Db2WaterLevelState => new(_haContext, "sensor.db2_water_level_state");
    ///<summary>DB3 EC</summary>
    public SensorEntity Db3Ec => new(_haContext, "sensor.db3_ec");
    ///<summary>DB3 Temp</summary>
    public SensorEntity Db3Temp => new(_haContext, "sensor.db3_temp");
    ///<summary>DB5 Water Level</summary>
    public SensorEntity Db3WaterLevelState => new(_haContext, "sensor.db3_water_level_state");
    ///<summary>DB4 EC</summary>
    public SensorEntity Db4Ec => new(_haContext, "sensor.db4_ec");
    ///<summary>DB4 Temp</summary>
    public SensorEntity Db4Temp => new(_haContext, "sensor.db4_temp");
    ///<summary>DB4 Water Level State</summary>
    public SensorEntity Db4WaterLevelState => new(_haContext, "sensor.db4_water_level_state");
    ///<summary>DB5 EC</summary>
    public SensorEntity Db5Ec => new(_haContext, "sensor.db5_ec");
    ///<summary>DB5 Temp</summary>
    public SensorEntity Db5Temp => new(_haContext, "sensor.db5_temp");
    ///<summary>DB3 Water Level</summary>
    public SensorEntity Db5WaterLevelState => new(_haContext, "sensor.db5_water_level_state");
    ///<summary>DB6 EC</summary>
    public SensorEntity Db6Ec => new(_haContext, "sensor.db6_ec");
    ///<summary>DB6 Temp</summary>
    public SensorEntity Db6Temp => new(_haContext, "sensor.db6_temp");
    ///<summary>DB6 Water Level State</summary>
    public SensorEntity Db6WaterLevelState => new(_haContext, "sensor.db6_water_level_state");
    ///<summary>EPSON ET-2760 Series</summary>
    public SensorEntity EpsonEt2760Series => new(_haContext, "sensor.epson_et_2760_series");
    ///<summary>Fresh Res Water Level State</summary>
    public SensorEntity FreshResWaterLevelState => new(_haContext, "sensor.fresh_res_water_level_state");
    ///<summary>Local IP</summary>
    public SensorEntity LocalIp => new(_haContext, "sensor.local_ip");
    ///<summary>netdaemon_status</summary>
    public SensorEntity NetdaemonStatus => new(_haContext, "sensor.netdaemon_status");
    ///<summary>nft EC</summary>
    public SensorEntity NftEc => new(_haContext, "sensor.nft_ec");
    ///<summary>NFT Temp</summary>
    public SensorEntity NftTemp => new(_haContext, "sensor.nft_temp");
    ///<summary>NFT Water Level</summary>
    public SensorEntity NftWaterLevelState => new(_haContext, "sensor.nft_water_level_state");
    ///<summary>OctoPrint Current State</summary>
    public SensorEntity OctoprintCurrentState => new(_haContext, "sensor.octoprint_current_state");
    ///<summary>OctoPrint Estimated Finish Time</summary>
    public SensorEntity OctoprintEstimatedFinishTime => new(_haContext, "sensor.octoprint_estimated_finish_time");
    ///<summary>OctoPrint Start Time</summary>
    public SensorEntity OctoprintStartTime => new(_haContext, "sensor.octoprint_start_time");
    ///<summary>OpenWeatherMap Condition</summary>
    public SensorEntity OpenweathermapCondition => new(_haContext, "sensor.openweathermap_condition");
    ///<summary>OpenWeatherMap Forecast Condition</summary>
    public SensorEntity OpenweathermapForecastCondition => new(_haContext, "sensor.openweathermap_forecast_condition");
    ///<summary>OpenWeatherMap Forecast Time</summary>
    public SensorEntity OpenweathermapForecastTime => new(_haContext, "sensor.openweathermap_forecast_time");
    ///<summary>OpenWeatherMap Precipitation kind</summary>
    public SensorEntity OpenweathermapPrecipitationKind => new(_haContext, "sensor.openweathermap_precipitation_kind");
    ///<summary>OpenWeatherMap Weather</summary>
    public SensorEntity OpenweathermapWeather => new(_haContext, "sensor.openweathermap_weather");
    ///<summary>OpenWeatherMap Weather Code</summary>
    public SensorEntity OpenweathermapWeatherCode => new(_haContext, "sensor.openweathermap_weather_code");
    ///<summary>SamsungFlex Battery health</summary>
    public SensorEntity SamsungflexBatteryHealth => new(_haContext, "sensor.samsungflex_battery_health");
    ///<summary>SamsungFlex Battery state</summary>
    public SensorEntity SamsungflexBatteryState => new(_haContext, "sensor.samsungflex_battery_state");
    ///<summary>SamsungFlex Charger type</summary>
    public SensorEntity SamsungflexChargerType => new(_haContext, "sensor.samsungflex_charger_type");
    ///<summary>Sun Next dawn</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Next dusk</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Next midnight</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Next noon</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Next rising</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Next setting</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>Swp Cool W Level State</summary>
    public SensorEntity SwpCoolWLevelState => new(_haContext, "sensor.swp_cool_w_level_state");
    ///<summary>Test Node W Level State</summary>
    public SensorEntity TestNodeWLevelState => new(_haContext, "sensor.test_node_w_level_state");
    ///<summary>B5178A9E5 Estimated distance</summary>
    public NumericSensorEntity B5178a9e5EstimatedDistance => new(_haContext, "sensor.b5178a9e5_estimated_distance");
    ///<summary>B5178A9E5 Remote Battery</summary>
    public NumericSensorEntity B5178a9e5RemoteBattery => new(_haContext, "sensor.b5178a9e5_remote_battery");
    ///<summary>B5178A9E5 Remote Humidity</summary>
    public NumericSensorEntity B5178a9e5RemoteHumidity => new(_haContext, "sensor.b5178a9e5_remote_humidity");
    ///<summary>B5178A9E5 Remote Temperature</summary>
    public NumericSensorEntity B5178a9e5RemoteTemperature => new(_haContext, "sensor.b5178a9e5_remote_temperature");
    ///<summary>daily_energy</summary>
    public NumericSensorEntity DailyEnergy => new(_haContext, "sensor.daily_energy");
    ///<summary>EC Sensor</summary>
    public NumericSensorEntity EcSensor => new(_haContext, "sensor.ec_sensor");
    ///<summary>EPSON ET-2760 Series Black ink</summary>
    public NumericSensorEntity EpsonEt2760SeriesBlackInk => new(_haContext, "sensor.epson_et_2760_series_black_ink");
    ///<summary>EPSON ET-2760 Series Cyan ink</summary>
    public NumericSensorEntity EpsonEt2760SeriesCyanInk => new(_haContext, "sensor.epson_et_2760_series_cyan_ink");
    ///<summary>EPSON ET-2760 Series Magenta ink</summary>
    public NumericSensorEntity EpsonEt2760SeriesMagentaInk => new(_haContext, "sensor.epson_et_2760_series_magenta_ink");
    ///<summary>EPSON ET-2760 Series Yellow ink</summary>
    public NumericSensorEntity EpsonEt2760SeriesYellowInk => new(_haContext, "sensor.epson_et_2760_series_yellow_ink");
    ///<summary>Ext Hum</summary>
    public NumericSensorEntity ExteriorHumidity => new(_haContext, "sensor.exterior_humidity");
    ///<summary>Ext Temp</summary>
    public NumericSensorEntity ExteriorTemperature => new(_haContext, "sensor.exterior_temperature");
    ///<summary>GH Interal Protected Humidity</summary>
    public NumericSensorEntity GhInteralProtectedHumidity => new(_haContext, "sensor.gh_interal_protected_humidity");
    ///<summary>GH Interal Protected Temp</summary>
    public NumericSensorEntity GhInteralProtectedTemp => new(_haContext, "sensor.gh_interal_protected_temp");
    ///<summary>Google Wifi System AAAAABycHeI Connected Devices</summary>
    public NumericSensorEntity GoogleWifiSystemAaaaabycheiConnectedDevices => new(_haContext, "sensor.google_wifi_system_aaaaabychei_connected_devices");
    ///<summary>Google Wifi System AAAAABycHeI Download Speed</summary>
    public NumericSensorEntity GoogleWifiSystemAaaaabycheiDownloadSpeed => new(_haContext, "sensor.google_wifi_system_aaaaabychei_download_speed");
    ///<summary>Google Wifi System AAAAABycHeI Download Traffic</summary>
    public NumericSensorEntity GoogleWifiSystemAaaaabycheiDownloadTraffic => new(_haContext, "sensor.google_wifi_system_aaaaabychei_download_traffic");
    ///<summary>Google Wifi System AAAAABycHeI Guest Devices</summary>
    public NumericSensorEntity GoogleWifiSystemAaaaabycheiGuestDevices => new(_haContext, "sensor.google_wifi_system_aaaaabychei_guest_devices");
    ///<summary>Google Wifi System AAAAABycHeI Total Devices</summary>
    public NumericSensorEntity GoogleWifiSystemAaaaabycheiTotalDevices => new(_haContext, "sensor.google_wifi_system_aaaaabychei_total_devices");
    ///<summary>Google Wifi System AAAAABycHeI Upload Speed</summary>
    public NumericSensorEntity GoogleWifiSystemAaaaabycheiUploadSpeed => new(_haContext, "sensor.google_wifi_system_aaaaabychei_upload_speed");
    ///<summary>Google Wifi System AAAAABycHeI Upload Traffic</summary>
    public NumericSensorEntity GoogleWifiSystemAaaaabycheiUploadTraffic => new(_haContext, "sensor.google_wifi_system_aaaaabychei_upload_traffic");
    ///<summary>Govee Indoor Temp Battery</summary>
    public NumericSensorEntity GoveeIndoorTempBattery => new(_haContext, "sensor.govee_indoor_temp_battery");
    ///<summary>Govee Indoor Temp Humidity</summary>
    public NumericSensorEntity GoveeIndoorTempHumidity => new(_haContext, "sensor.govee_indoor_temp_humidity");
    ///<summary>Govee Indoor Temp Temperature</summary>
    public NumericSensorEntity GoveeIndoorTempTemperature => new(_haContext, "sensor.govee_indoor_temp_temperature");
    ///<summary>Greenhosue CO2 Temp</summary>
    public NumericSensorEntity GreenhosueCo2Temp => new(_haContext, "sensor.greenhosue_co2_temp");
    ///<summary>Greenhouse CO2</summary>
    public NumericSensorEntity GreenhouseCo2 => new(_haContext, "sensor.greenhouse_co2");
    ///<summary>Greenhouse CO2 Hum</summary>
    public NumericSensorEntity GreenhouseCo2Hum => new(_haContext, "sensor.greenhouse_co2_hum");
    ///<summary>GreenHouse humidity</summary>
    public NumericSensorEntity GreenhouseHumidity => new(_haContext, "sensor.greenhouse_humidity");
    ///<summary>Int Hum</summary>
    public NumericSensorEntity GreenhouseInternalHumidity => new(_haContext, "sensor.greenhouse_internal_humidity");
    ///<summary>Int Temp</summary>
    public NumericSensorEntity GreenhouseInternalTemperature => new(_haContext, "sensor.greenhouse_internal_temperature");
    ///<summary>GreenHouse temp</summary>
    public NumericSensorEntity GreenhouseTemp => new(_haContext, "sensor.greenhouse_temp");
    ///<summary>hacs</summary>
    public NumericSensorEntity Hacs => new(_haContext, "sensor.hacs");
    ///<summary>monthly_energy</summary>
    public NumericSensorEntity MonthlyEnergy => new(_haContext, "sensor.monthly_energy");
    ///<summary>OctoPrint actual bed temp</summary>
    public NumericSensorEntity OctoprintActualBedTemp => new(_haContext, "sensor.octoprint_actual_bed_temp");
    ///<summary>OctoPrint actual tool0 temp</summary>
    public NumericSensorEntity OctoprintActualTool0Temp => new(_haContext, "sensor.octoprint_actual_tool0_temp");
    ///<summary>OctoPrint actual W temp</summary>
    public NumericSensorEntity OctoprintActualWTemp => new(_haContext, "sensor.octoprint_actual_w_temp");
    ///<summary>OctoPrint Job Percentage</summary>
    public NumericSensorEntity OctoprintJobPercentage => new(_haContext, "sensor.octoprint_job_percentage");
    ///<summary>OctoPrint target bed temp</summary>
    public NumericSensorEntity OctoprintTargetBedTemp => new(_haContext, "sensor.octoprint_target_bed_temp");
    ///<summary>OctoPrint target tool0 temp</summary>
    public NumericSensorEntity OctoprintTargetTool0Temp => new(_haContext, "sensor.octoprint_target_tool0_temp");
    ///<summary>OctoPrint target W temp</summary>
    public NumericSensorEntity OctoprintTargetWTemp => new(_haContext, "sensor.octoprint_target_w_temp");
    ///<summary>OnHub Download speed</summary>
    public NumericSensorEntity OnhubKibSReceived => new(_haContext, "sensor.onhub_kib_s_received");
    ///<summary>OnHub Upload speed</summary>
    public NumericSensorEntity OnhubKibSSent => new(_haContext, "sensor.onhub_kib_s_sent");
    ///<summary>OpenWeatherMap Cloud coverage</summary>
    public NumericSensorEntity OpenweathermapCloudCoverage => new(_haContext, "sensor.openweathermap_cloud_coverage");
    ///<summary>OpenWeatherMap Dew Point</summary>
    public NumericSensorEntity OpenweathermapDewPoint => new(_haContext, "sensor.openweathermap_dew_point");
    ///<summary>OpenWeatherMap Feels like temperature</summary>
    public NumericSensorEntity OpenweathermapFeelsLikeTemperature => new(_haContext, "sensor.openweathermap_feels_like_temperature");
    ///<summary>OpenWeatherMap Forecast Cloud coverage</summary>
    public NumericSensorEntity OpenweathermapForecastCloudCoverage => new(_haContext, "sensor.openweathermap_forecast_cloud_coverage");
    ///<summary>OpenWeatherMap Forecast Precipitation</summary>
    public NumericSensorEntity OpenweathermapForecastPrecipitation => new(_haContext, "sensor.openweathermap_forecast_precipitation");
    ///<summary>OpenWeatherMap Forecast Precipitation probability</summary>
    public NumericSensorEntity OpenweathermapForecastPrecipitationProbability => new(_haContext, "sensor.openweathermap_forecast_precipitation_probability");
    ///<summary>OpenWeatherMap Forecast Pressure</summary>
    public NumericSensorEntity OpenweathermapForecastPressure => new(_haContext, "sensor.openweathermap_forecast_pressure");
    ///<summary>OpenWeatherMap Forecast Temperature</summary>
    public NumericSensorEntity OpenweathermapForecastTemperature => new(_haContext, "sensor.openweathermap_forecast_temperature");
    ///<summary>OpenWeatherMap Forecast Temperature Low</summary>
    public NumericSensorEntity OpenweathermapForecastTemperatureLow => new(_haContext, "sensor.openweathermap_forecast_temperature_low");
    ///<summary>OpenWeatherMap Forecast Wind bearing</summary>
    public NumericSensorEntity OpenweathermapForecastWindBearing => new(_haContext, "sensor.openweathermap_forecast_wind_bearing");
    ///<summary>OpenWeatherMap Forecast Wind speed</summary>
    public NumericSensorEntity OpenweathermapForecastWindSpeed => new(_haContext, "sensor.openweathermap_forecast_wind_speed");
    ///<summary>OpenWeatherMap Humidity</summary>
    public NumericSensorEntity OpenweathermapHumidity => new(_haContext, "sensor.openweathermap_humidity");
    ///<summary>OpenWeatherMap Pressure</summary>
    public NumericSensorEntity OpenweathermapPressure => new(_haContext, "sensor.openweathermap_pressure");
    ///<summary>OpenWeatherMap Rain</summary>
    public NumericSensorEntity OpenweathermapRain => new(_haContext, "sensor.openweathermap_rain");
    ///<summary>OpenWeatherMap Snow</summary>
    public NumericSensorEntity OpenweathermapSnow => new(_haContext, "sensor.openweathermap_snow");
    ///<summary>OpenWeatherMap Temperature</summary>
    public NumericSensorEntity OpenweathermapTemperature => new(_haContext, "sensor.openweathermap_temperature");
    ///<summary>OpenWeatherMap UV Index</summary>
    public NumericSensorEntity OpenweathermapUvIndex => new(_haContext, "sensor.openweathermap_uv_index");
    ///<summary>OpenWeatherMap Visibility</summary>
    public NumericSensorEntity OpenweathermapVisibility => new(_haContext, "sensor.openweathermap_visibility");
    ///<summary>OpenWeatherMap Wind bearing</summary>
    public NumericSensorEntity OpenweathermapWindBearing => new(_haContext, "sensor.openweathermap_wind_bearing");
    ///<summary>OpenWeatherMap Wind speed</summary>
    public NumericSensorEntity OpenweathermapWindSpeed => new(_haContext, "sensor.openweathermap_wind_speed");
    ///<summary>Power Strip 1 WiFi Status</summary>
    public NumericSensorEntity PowerStrip1WifiStatus => new(_haContext, "sensor.power_strip_1_wifi_status");
    ///<summary>Power Strip Mid WiFi Status</summary>
    public NumericSensorEntity PowerStripMidWifiStatus => new(_haContext, "sensor.power_strip_mid_wifi_status");
    ///<summary>Power Strip Test Zone WiFi Status</summary>
    public NumericSensorEntity PowerStripTestZoneWifiStatus => new(_haContext, "sensor.power_strip_test_zone_wifi_status");
    ///<summary>PowerStripNE WiFi Status</summary>
    public NumericSensorEntity PowerstripneWifiStatus => new(_haContext, "sensor.powerstripne_wifi_status");
    ///<summary>SamsungFlex Battery level</summary>
    public NumericSensorEntity SamsungflexBatteryLevel => new(_haContext, "sensor.samsungflex_battery_level");
    ///<summary>SamsungFlex Battery power</summary>
    public NumericSensorEntity SamsungflexBatteryPower => new(_haContext, "sensor.samsungflex_battery_power");
    ///<summary>SamsungFlex Battery temperature</summary>
    public NumericSensorEntity SamsungflexBatteryTemperature => new(_haContext, "sensor.samsungflex_battery_temperature");
    ///<summary>Estimated distance</summary>
    public NumericSensorEntity TegraUbuntu501eEstimatedDistance => new(_haContext, "sensor.tegra_ubuntu_501e_estimated_distance");
    ///<summary>Water Temperature</summary>
    public NumericSensorEntity WaterTemperature => new(_haContext, "sensor.water_temperature");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>balena Pi4 (Raspberry Pi)</summary>
    public SwitchEntity _139976bRaspberryPi => new(_haContext, "switch.139976b_raspberry_pi");
    ///<summary>2070b20 (Raspberry Pi)</summary>
    public SwitchEntity _2070b20RaspberryPi => new(_haContext, "switch.2070b20_raspberry_pi");
    ///<summary>Bap (Raspberry Pi)</summary>
    public SwitchEntity _98a696bRaspberryPi => new(_haContext, "switch.98a696b_raspberry_pi");
    ///<summary>9d6de1b (Raspberry Pi)</summary>
    public SwitchEntity _9d6de1bRaspberryPi => new(_haContext, "switch.9d6de1b_raspberry_pi");
    ///<summary>a1b4331</summary>
    public SwitchEntity A1b4331 => new(_haContext, "switch.a1b4331");
    ///<summary>a1b4331 (Raspberry Pi)</summary>
    public SwitchEntity A1b4331RaspberryPi => new(_haContext, "switch.a1b4331_raspberry_pi");
    ///<summary>a55e6ac (Raspberry Pi)</summary>
    public SwitchEntity A55e6acRaspberryPi => new(_haContext, "switch.a55e6ac_raspberry_pi");
    ///<summary>Allisons-iPhone</summary>
    public SwitchEntity AllisonsIphone => new(_haContext, "switch.allisons_iphone");
    ///<summary>Allisons-iPhone-13</summary>
    public SwitchEntity AllisonsIphone13 => new(_haContext, "switch.allisons_iphone_13");
    ///<summary>Amazon Android device (Amazon)</summary>
    public SwitchEntity AmazonA2bc345cbAmazonAndroidDevice => new(_haContext, "switch.amazon_a2bc345cb_amazon_android_device");
    ///<summary>amazon-a2bc345cb (Amazon Android device)</summary>
    public SwitchEntity AmazonA2bc345cbLanAmazonAndroidDevice => new(_haContext, "switch.amazon_a2bc345cb_lan_amazon_android_device");
    ///<summary>Amazon Kindle (Amazon)</summary>
    public SwitchEntity AmazonKindleAmazon => new(_haContext, "switch.amazon_kindle_amazon");
    ///<summary>Unnamed device</summary>
    public SwitchEntity Android2 => new(_haContext, "switch.android_2");
    ///<summary>Android (Amazon Android device)</summary>
    public SwitchEntity AndroidAmazonAndroidDevice => new(_haContext, "switch.android_amazon_android_device");
    ///<summary>Samsung Android device (Samsung)</summary>
    public SwitchEntity AndroidSamsungAndroidDevice => new(_haContext, "switch.android_samsung_android_device");
    ///<summary>CL-LAP-24 (Windows device)</summary>
    public SwitchEntity ClLap24WindowsDevice => new(_haContext, "switch.cl_lap_24_windows_device");
    ///<summary>co2sensor</summary>
    public SwitchEntity Co2sensor => new(_haContext, "switch.co2sensor");
    ///<summary>Unnamed device</summary>
    public SwitchEntity Cody => new(_haContext, "switch.cody");
    ///<summary>db1_water_level</summary>
    public SwitchEntity Db1WaterLevel => new(_haContext, "switch.db1_water_level");
    ///<summary>db2_water_level</summary>
    public SwitchEntity Db2WaterLevel => new(_haContext, "switch.db2_water_level");
    ///<summary>db3_water_level</summary>
    public SwitchEntity Db3WaterLevel => new(_haContext, "switch.db3_water_level");
    ///<summary>db4_water_level</summary>
    public SwitchEntity Db4WaterLevel => new(_haContext, "switch.db4_water_level");
    ///<summary>db5_water_level</summary>
    public SwitchEntity Db5WaterLevel => new(_haContext, "switch.db5_water_level");
    ///<summary>db6_water_level</summary>
    public SwitchEntity Db6WaterLevel => new(_haContext, "switch.db6_water_level");
    ///<summary>DESKTOP-4KPKKLJ (Windows device)</summary>
    public SwitchEntity Desktop4kpkkljWindowsDevice => new(_haContext, "switch.desktop_4kpkklj_windows_device");
    ///<summary>DESKTOP-VL1SBG5 (Windows device)</summary>
    public SwitchEntity DesktopVl1sbg5WindowsDevice => new(_haContext, "switch.desktop_vl1sbg5_windows_device");
    ///<summary>Diane-s-S22</summary>
    public SwitchEntity DianeSS22 => new(_haContext, "switch.diane_s_s22");
    ///<summary>Windows device</summary>
    public SwitchEntity Dianesurface8WindowsDevice => new(_haContext, "switch.dianesurface8_windows_device");
    ///<summary>EnablePumps</summary>
    public SwitchEntity Enablepumps => new(_haContext, "switch.enablepumps");
    ///<summary>EPSOND97AE7 (Epson Printer)</summary>
    public SwitchEntity Epsond97ae7EpsonPrinter => new(_haContext, "switch.epsond97ae7_epson_printer");
    ///<summary>ESP_76FAF5</summary>
    public SwitchEntity Esp76faf5 => new(_haContext, "switch.esp_76faf5");
    ///<summary>Fan</summary>
    public SwitchEntity Fan => new(_haContext, "switch.fan");
    ///<summary>fresh_res_water_level</summary>
    public SwitchEntity FreshResWaterLevel => new(_haContext, "switch.fresh_res_water_level");
    ///<summary>Android-2</summary>
    public SwitchEntity GalaxyS22 => new(_haContext, "switch.galaxy_s22");
    ///<summary>GH Back Light</summary>
    public SwitchEntity GhBackLight => new(_haContext, "switch.gh_back_light");
    ///<summary>gh_camera</summary>
    public SwitchEntity GhCamera => new(_haContext, "switch.gh_camera");
    ///<summary>GH Front Light Switch</summary>
    public SwitchEntity GhFrontLightSwitch => new(_haContext, "switch.gh_front_light_switch");
    ///<summary>GH Interior and Exterior Temp Restart</summary>
    public SwitchEntity GhInteriorAndExteriorTempRestart => new(_haContext, "switch.gh_interior_and_exterior_temp_restart");
    ///<summary>GH Protected Restart</summary>
    public SwitchEntity GhProtectedRestart => new(_haContext, "switch.gh_protected_restart");
    ///<summary>ghbacklight</summary>
    public SwitchEntity Ghbacklight => new(_haContext, "switch.ghbacklight");
    ///<summary>ghlightfront</summary>
    public SwitchEntity Ghlightfront => new(_haContext, "switch.ghlightfront");
    ///<summary>ghtemp2</summary>
    public SwitchEntity Ghtemp2 => new(_haContext, "switch.ghtemp2");
    ///<summary>greenhousetemp</summary>
    public SwitchEntity Greenhousetemp => new(_haContext, "switch.greenhousetemp");
    ///<summary>Home (Home Assistant OS)</summary>
    public SwitchEntity HomeassistantRaspberryPi => new(_haContext, "switch.homeassistant_raspberry_pi");
    ///<summary>iPad</summary>
    public SwitchEntity Ipad => new(_haContext, "switch.ipad");
    ///<summary>iPhone-4</summary>
    public SwitchEntity Iphone4 => new(_haContext, "switch.iphone_4");
    ///<summary>Kimberlys-iPad</summary>
    public SwitchEntity KimberlysIpad => new(_haContext, "switch.kimberlys_ipad");
    ///<summary>Windows device</summary>
    public SwitchEntity KtWorkWindowsDevice => new(_haContext, "switch.kt_work_windows_device");
    ///<summary>L08643 (Windows device)</summary>
    public SwitchEntity L08643WindowsDevice => new(_haContext, "switch.l08643_windows_device");
    ///<summary>Windows device</summary>
    public SwitchEntity L08779WindowsDevice => new(_haContext, "switch.l08779_windows_device");
    ///<summary>L08987 (Windows device)</summary>
    public SwitchEntity L08987WindowsDevice => new(_haContext, "switch.l08987_windows_device");
    ///<summary>Windows device</summary>
    public SwitchEntity LaptopSulf1m3lWindowsDevice => new(_haContext, "switch.laptop_sulf1m3l_windows_device");
    ///<summary>Laurie</summary>
    public SwitchEntity Laurie => new(_haContext, "switch.laurie");
    ///<summary>Laurie-2</summary>
    public SwitchEntity Laurie2 => new(_haContext, "switch.laurie_2");
    ///<summary>Laurie-2</summary>
    public SwitchEntity Laurie22 => new(_haContext, "switch.laurie_2_2");
    ///<summary>Laurie</summary>
    public SwitchEntity Laurie3 => new(_haContext, "switch.laurie_3");
    ///<summary>LG</summary>
    public SwitchEntity Lg => new(_haContext, "switch.lg");
    ///<summary>Lindas-MacBook-Air (Apple)</summary>
    public SwitchEntity LindasMacbookAirApple => new(_haContext, "switch.lindas_macbook_air_apple");
    ///<summary>Master (Chromecast)</summary>
    public SwitchEntity MasterChromecast => new(_haContext, "switch.master_chromecast");
    ///<summary>Microsoft</summary>
    public SwitchEntity Microsoft => new(_haContext, "switch.microsoft");
    ///<summary>MightySongs</summary>
    public SwitchEntity Mighty36 => new(_haContext, "switch.mighty_36");
    ///<summary>Unnamed device</summary>
    public SwitchEntity MollysIpad => new(_haContext, "switch.mollys_ipad");
    ///<summary>Unnamed device</summary>
    public SwitchEntity MollysIphone => new(_haContext, "switch.mollys_iphone");
    ///<summary>Unnamed device</summary>
    public SwitchEntity MollysIphone2 => new(_haContext, "switch.mollys_iphone_2");
    ///<summary>Jakes-iPhone</summary>
    public SwitchEntity MontzingosIphone => new(_haContext, "switch.montzingos_iphone");
    ///<summary>Motorola Android device (Motorola)</summary>
    public SwitchEntity MotorolaAndroidDeviceMotorola => new(_haContext, "switch.motorola_android_device_motorola");
    ///<summary>Motorola Android device (Motorola)</summary>
    public SwitchEntity MotorolaAndroidDeviceMotorola2 => new(_haContext, "switch.motorola_android_device_motorola_2");
    ///<summary>myx_00186156838* (Ooma)</summary>
    public SwitchEntity Myx00186156838Ooma => new(_haContext, "switch.myx_00186156838_ooma");
    ///<summary>Nest Thermostat (Google)</summary>
    public SwitchEntity NestThermostatGoogle => new(_haContext, "switch.nest_thermostat_google");
    ///<summary>netdaemon_dehumidifier_app</summary>
    public SwitchEntity NetdaemonDehumidifierApp => new(_haContext, "switch.netdaemon_dehumidifier_app");
    ///<summary>netdaemon_envcontrols_app</summary>
    public SwitchEntity NetdaemonEnvcontrolsApp => new(_haContext, "switch.netdaemon_envcontrols_app");
    ///<summary>netdaemon_environemtnapp</summary>
    public SwitchEntity NetdaemonEnvironemtnapp => new(_haContext, "switch.netdaemon_environemtnapp");
    ///<summary>netdaemon_generatedappbase</summary>
    public SwitchEntity NetdaemonGeneratedappbase => new(_haContext, "switch.netdaemon_generatedappbase");
    ///<summary>netdaemon_growlight_app</summary>
    public SwitchEntity NetdaemonGrowlightApp => new(_haContext, "switch.netdaemon_growlight_app");
    ///<summary>netdaemon_growlightapp</summary>
    public SwitchEntity NetdaemonGrowlightapp => new(_haContext, "switch.netdaemon_growlightapp");
    ///<summary>netdaemon_heatandco2app</summary>
    public SwitchEntity NetdaemonHeatandco2app => new(_haContext, "switch.netdaemon_heatandco2app");
    ///<summary>netdaemon_helloworldapp</summary>
    public SwitchEntity NetdaemonHelloworldapp => new(_haContext, "switch.netdaemon_helloworldapp");
    ///<summary>netdaemon_netdaemon_app</summary>
    public SwitchEntity NetdaemonNetdaemonApp => new(_haContext, "switch.netdaemon_netdaemon_app");
    ///<summary>netdaemon_nutrients_app</summary>
    public SwitchEntity NetdaemonNutrientsApp => new(_haContext, "switch.netdaemon_nutrients_app");
    ///<summary>netdaemon_nutrientsapp</summary>
    public SwitchEntity NetdaemonNutrientsapp => new(_haContext, "switch.netdaemon_nutrientsapp");
    ///<summary>netdaemon_pirlights_app</summary>
    public SwitchEntity NetdaemonPirlightsApp => new(_haContext, "switch.netdaemon_pirlights_app");
    ///<summary>netdaemon_pirlightsapp</summary>
    public SwitchEntity NetdaemonPirlightsapp => new(_haContext, "switch.netdaemon_pirlightsapp");
    ///<summary>netdaemon_refill_app</summary>
    public SwitchEntity NetdaemonRefillApp => new(_haContext, "switch.netdaemon_refill_app");
    ///<summary>netdaemon_refillapp</summary>
    public SwitchEntity NetdaemonRefillapp => new(_haContext, "switch.netdaemon_refillapp");
    ///<summary>nft_water_level</summary>
    public SwitchEntity NftWaterLevel => new(_haContext, "switch.nft_water_level");
    ///<summary>NGELOTTE (Windows device)</summary>
    public SwitchEntity NgelotteWindowsDevice => new(_haContext, "switch.ngelotte_windows_device");
    ///<summary>NGELOTTE (Windows device)</summary>
    public SwitchEntity NgelotteWindowsDevice2 => new(_haContext, "switch.ngelotte_windows_device_2");
    ///<summary>NGELOTTE10 (Dell)</summary>
    public SwitchEntity Ngelotte10ltDell => new(_haContext, "switch.ngelotte10lt_dell");
    ///<summary>Dell</summary>
    public SwitchEntity Ngelotte10ltDell2 => new(_haContext, "switch.ngelotte10lt_dell_2");
    ///<summary>NGELOTTE10 (Windows device)</summary>
    public SwitchEntity Ngelotte10ltWindowsDevice => new(_haContext, "switch.ngelotte10lt_windows_device");
    ///<summary>Nicholas&apos;s Fire TV (AFTMM)</summary>
    public SwitchEntity NicholasSFireTvAftmm => new(_haContext, "switch.nicholas_s_fire_tv_aftmm");
    ///<summary>Nintendo Switch (Nintendo)</summary>
    public SwitchEntity NintendoSwitchNintendo => new(_haContext, "switch.nintendo_switch_nintendo");
    ///<summary>Nintendo Switch (Nintendo)</summary>
    public SwitchEntity NintendoSwitchNintendo2 => new(_haContext, "switch.nintendo_switch_nintendo_2");
    ///<summary>Nintendo Switch (Nintendo)</summary>
    public SwitchEntity NintendoSwitchNintendo3 => new(_haContext, "switch.nintendo_switch_nintendo_3");
    ///<summary>Nintendo Switch (Nintendo)</summary>
    public SwitchEntity NintendoSwitchNintendo4 => new(_haContext, "switch.nintendo_switch_nintendo_4");
    ///<summary>Nuheat</summary>
    public SwitchEntity Nuheat => new(_haContext, "switch.nuheat");
    ///<summary>OctoPrint instance on octopi (1.9.2)</summary>
    public SwitchEntity OctopiRaspberryPi => new(_haContext, "switch.octopi_raspberry_pi");
    ///<summary>OctoPrint instance on octopi (1.9.3)</summary>
    public SwitchEntity OctopiRaspberryPi2 => new(_haContext, "switch.octopi_raspberry_pi_2");
    ///<summary>peristalticnutrients</summary>
    public SwitchEntity Peristalticnutrients => new(_haContext, "switch.peristalticnutrients");
    ///<summary>Pixel-5</summary>
    public SwitchEntity Pixel5 => new(_haContext, "switch.pixel_5");
    ///<summary>DB Grow Lights</summary>
    public SwitchEntity PowerStrip1Outlet1 => new(_haContext, "switch.power_strip_1_outlet_1");
    ///<summary>DB5 Main Pump</summary>
    public SwitchEntity PowerStrip1Outlet2 => new(_haContext, "switch.power_strip_1_outlet_2");
    ///<summary>Db5 Testing Zone Pump</summary>
    public SwitchEntity PowerStrip1Outlet3 => new(_haContext, "switch.power_strip_1_outlet_3");
    ///<summary>greenhouse heat and co2</summary>
    public SwitchEntity PowerStrip1Outlet4 => new(_haContext, "switch.power_strip_1_outlet_4");
    ///<summary>DB Water Levels - USB</summary>
    public SwitchEntity PowerStrip1Usb => new(_haContext, "switch.power_strip_1_usb");
    ///<summary>Power Strip Mid outlet 1</summary>
    public SwitchEntity PowerStripMidOutlet1 => new(_haContext, "switch.power_strip_mid_outlet_1");
    ///<summary>Power Strip Mid outlet 2</summary>
    public SwitchEntity PowerStripMidOutlet2 => new(_haContext, "switch.power_strip_mid_outlet_2");
    ///<summary>DB6 Testing Zone Pump</summary>
    public SwitchEntity PowerStripMidOutlet3 => new(_haContext, "switch.power_strip_mid_outlet_3");
    ///<summary>DB6 Main Pump</summary>
    public SwitchEntity PowerStripMidOutlet4 => new(_haContext, "switch.power_strip_mid_outlet_4");
    ///<summary>Power Strip Mid USB</summary>
    public SwitchEntity PowerStripMidUsb => new(_haContext, "switch.power_strip_mid_usb");
    ///<summary>Tz heat</summary>
    public SwitchEntity PowerStripTestZoneOutlet1 => new(_haContext, "switch.power_strip_test_zone_outlet_1");
    ///<summary>Ec probs</summary>
    public SwitchEntity PowerStripTestZoneOutlet2 => new(_haContext, "switch.power_strip_test_zone_outlet_2");
    ///<summary>Waste tank</summary>
    public SwitchEntity PowerStripTestZoneOutlet3 => new(_haContext, "switch.power_strip_test_zone_outlet_3");
    ///<summary>Nutrient power</summary>
    public SwitchEntity PowerStripTestZoneOutlet4 => new(_haContext, "switch.power_strip_test_zone_outlet_4");
    ///<summary>Power Strip Test Zone USB</summary>
    public SwitchEntity PowerStripTestZoneUsb => new(_haContext, "switch.power_strip_test_zone_usb");
    ///<summary>powerstrip_mid</summary>
    public SwitchEntity PowerstripMid => new(_haContext, "switch.powerstrip_mid");
    ///<summary>powerstripne</summary>
    public SwitchEntity Powerstripne => new(_haContext, "switch.powerstripne");
    ///<summary>PowerStripNE outlet 1</summary>
    public SwitchEntity PowerstripneOutlet1 => new(_haContext, "switch.powerstripne_outlet_1");
    ///<summary>PowerStripNE outlet 2</summary>
    public SwitchEntity PowerstripneOutlet2 => new(_haContext, "switch.powerstripne_outlet_2");
    ///<summary>Main Water Refill</summary>
    public SwitchEntity PowerstripneOutlet3 => new(_haContext, "switch.powerstripne_outlet_3");
    ///<summary>West Grow Lights</summary>
    public SwitchEntity PowerstripneOutlet4 => new(_haContext, "switch.powerstripne_outlet_4");
    ///<summary>PowerStripNE USB</summary>
    public SwitchEntity PowerstripneUsb => new(_haContext, "switch.powerstripne_usb");
    ///<summary>powerstriptestzone</summary>
    public SwitchEntity Powerstriptestzone => new(_haContext, "switch.powerstriptestzone");
    ///<summary>pwstrip1</summary>
    public SwitchEntity Pwstrip1 => new(_haContext, "switch.pwstrip1");
    ///<summary>Restart DB1 Water Level</summary>
    public SwitchEntity RestartDb1WaterLevel => new(_haContext, "switch.restart_db1_water_level");
    ///<summary>Restart DB2 Water Level</summary>
    public SwitchEntity RestartDb2WaterLevel => new(_haContext, "switch.restart_db2_water_level");
    ///<summary>Restart DB3 Water Level</summary>
    public SwitchEntity RestartDb3WaterLevel => new(_haContext, "switch.restart_db3_water_level");
    ///<summary>Restart DB4 Water Level</summary>
    public SwitchEntity RestartDb4WaterLevel => new(_haContext, "switch.restart_db4_water_level");
    ///<summary>Restart DB5 Water Level</summary>
    public SwitchEntity RestartDb5WaterLevel => new(_haContext, "switch.restart_db5_water_level");
    ///<summary>Restart DB6 Water Level</summary>
    public SwitchEntity RestartDb6WaterLevel => new(_haContext, "switch.restart_db6_water_level");
    ///<summary>Restart EC Sensor</summary>
    public SwitchEntity RestartEcSensor => new(_haContext, "switch.restart_ec_sensor");
    ///<summary>Restart Fresh Res Water Level</summary>
    public SwitchEntity RestartFreshResWaterLevel => new(_haContext, "switch.restart_fresh_res_water_level");
    ///<summary>Restart Fresh Water Level</summary>
    public SwitchEntity RestartFreshWaterLevel => new(_haContext, "switch.restart_fresh_water_level");
    ///<summary>Restart NFT Water Level</summary>
    public SwitchEntity RestartNftWaterLevel => new(_haContext, "switch.restart_nft_water_level");
    ///<summary>Restart Swp Cool W Level</summary>
    public SwitchEntity RestartSwpCoolWLevel => new(_haContext, "switch.restart_swp_cool_w_level");
    ///<summary>Restart Test Node W Level</summary>
    public SwitchEntity RestartTestNodeWLevel => new(_haContext, "switch.restart_test_node_w_level");
    ///<summary>RIPL-d017691e362*</summary>
    public SwitchEntity RiplD017691e362 => new(_haContext, "switch.ripl_d017691e362");
    ///<summary>Samsung-2 (Samsung)</summary>
    public SwitchEntity Samsung => new(_haContext, "switch.samsung");
    ///<summary>Samsung</summary>
    public SwitchEntity Samsung2 => new(_haContext, "switch.samsung_2");
    ///<summary>Samsung flex</summary>
    public SwitchEntity SamsungFlex => new(_haContext, "switch.samsung_flex");
    ///<summary>sbasic1</summary>
    public SwitchEntity Sbasic1 => new(_haContext, "switch.sbasic1");
    ///<summary>sonoff4chz1</summary>
    public SwitchEntity Sonoff4chz1 => new(_haContext, "switch.sonoff4chz1");
    ///<summary>sonoff4chz2</summary>
    public SwitchEntity Sonoff4chz2 => new(_haContext, "switch.sonoff4chz2");
    ///<summary>sonoff4chz3</summary>
    public SwitchEntity Sonoff4chz3 => new(_haContext, "switch.sonoff4chz3");
    ///<summary>sorterHost (Dell)</summary>
    public SwitchEntity SorterhostDell => new(_haContext, "switch.sorterhost_dell");
    ///<summary>ST1P1</summary>
    public SwitchEntity St1p1 => new(_haContext, "switch.st1p1");
    ///<summary>ST1P2</summary>
    public SwitchEntity St1p2 => new(_haContext, "switch.st1p2");
    ///<summary>ST1P3</summary>
    public SwitchEntity St1p3 => new(_haContext, "switch.st1p3");
    ///<summary>ST1P4</summary>
    public SwitchEntity St1p4 => new(_haContext, "switch.st1p4");
    ///<summary>Db1 Testing Zone Pump</summary>
    public SwitchEntity St2p1 => new(_haContext, "switch.st2p1");
    ///<summary>Db2 Main Pump</summary>
    public SwitchEntity St2p2 => new(_haContext, "switch.st2p2");
    ///<summary>Db1 Main Pump</summary>
    public SwitchEntity St2p3 => new(_haContext, "switch.st2p3");
    ///<summary>DB2 Testing Zone Pump</summary>
    public SwitchEntity St2p4 => new(_haContext, "switch.st2p4");
    ///<summary>DB4 Main Pump</summary>
    public SwitchEntity St3p1 => new(_haContext, "switch.st3p1");
    ///<summary>DB3 main pump</summary>
    public SwitchEntity St3p2 => new(_haContext, "switch.st3p2");
    ///<summary>Db4 Testing Zone Pump</summary>
    public SwitchEntity St3p3 => new(_haContext, "switch.st3p3");
    ///<summary>DB3 Testing Zone Pump</summary>
    public SwitchEntity St3p4 => new(_haContext, "switch.st3p4");
    ///<summary>Nft testing pump</summary>
    public SwitchEntity St4p1 => new(_haContext, "switch.st4p1");
    ///<summary>Floor fan</summary>
    public SwitchEntity St4p2 => new(_haContext, "switch.st4p2");
    ///<summary>Swp Cool</summary>
    public SwitchEntity St4p3 => new(_haContext, "switch.st4p3");
    ///<summary>Grow Lights</summary>
    public SwitchEntity St4p4 => new(_haContext, "switch.st4p4");
    ///<summary>station4</summary>
    public SwitchEntity Station4 => new(_haContext, "switch.station4");
    ///<summary>swp_cool_water_level</summary>
    public SwitchEntity SwpCoolWaterLevel => new(_haContext, "switch.swp_cool_water_level");
    ///<summary>swp_cool_water_level</summary>
    public SwitchEntity SwpCoolWaterLevel2 => new(_haContext, "switch.swp_cool_water_level_2");
    ///<summary>tb2P1</summary>
    public SwitchEntity Tb2p1 => new(_haContext, "switch.tb2p1");
    ///<summary>tb2P2</summary>
    public SwitchEntity Tb2p2 => new(_haContext, "switch.tb2p2");
    ///<summary>SWP cool refill</summary>
    public SwitchEntity Tb2p3 => new(_haContext, "switch.tb2p3");
    ///<summary>Fresh water</summary>
    public SwitchEntity Tb2p4 => new(_haContext, "switch.tb2p4");
    ///<summary>Testing to waste tank</summary>
    public SwitchEntity Tbp1 => new(_haContext, "switch.tbp1");
    ///<summary>test_node_water_level</summary>
    public SwitchEntity TestNodeWaterLevel => new(_haContext, "switch.test_node_water_level");
    ///<summary>testingbucketsf4ch</summary>
    public SwitchEntity Testingbucketsf4ch => new(_haContext, "switch.testingbucketsf4ch");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice => new(_haContext, "switch.unnamed_device");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice10 => new(_haContext, "switch.unnamed_device_10");
    ///<summary>im-watching-you</summary>
    public SwitchEntity UnnamedDevice11 => new(_haContext, "switch.unnamed_device_11");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice12 => new(_haContext, "switch.unnamed_device_12");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice13 => new(_haContext, "switch.unnamed_device_13");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice14 => new(_haContext, "switch.unnamed_device_14");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice15 => new(_haContext, "switch.unnamed_device_15");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice16 => new(_haContext, "switch.unnamed_device_16");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice17 => new(_haContext, "switch.unnamed_device_17");
    ///<summary>Mollys-iPhone</summary>
    public SwitchEntity UnnamedDevice18 => new(_haContext, "switch.unnamed_device_18");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice19 => new(_haContext, "switch.unnamed_device_19");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice2 => new(_haContext, "switch.unnamed_device_2");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice20 => new(_haContext, "switch.unnamed_device_20");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice21 => new(_haContext, "switch.unnamed_device_21");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice22 => new(_haContext, "switch.unnamed_device_22");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice23 => new(_haContext, "switch.unnamed_device_23");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice24 => new(_haContext, "switch.unnamed_device_24");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice3 => new(_haContext, "switch.unnamed_device_3");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice4 => new(_haContext, "switch.unnamed_device_4");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice5 => new(_haContext, "switch.unnamed_device_5");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice6 => new(_haContext, "switch.unnamed_device_6");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice7 => new(_haContext, "switch.unnamed_device_7");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice8 => new(_haContext, "switch.unnamed_device_8");
    ///<summary>Unnamed device</summary>
    public SwitchEntity UnnamedDevice9 => new(_haContext, "switch.unnamed_device_9");
    ///<summary>Valve</summary>
    public SwitchEntity Valve => new(_haContext, "switch.valve");
    ///<summary>Valve 2</summary>
    public SwitchEntity Valve2 => new(_haContext, "switch.valve_2");
    ///<summary>VMB4000 (Netgear)</summary>
    public SwitchEntity Vmb4000Netgear => new(_haContext, "switch.vmb4000_netgear");
    ///<summary>watermonitor</summary>
    public SwitchEntity Watermonitor => new(_haContext, "switch.watermonitor");
    ///<summary>WiFiAP</summary>
    public SwitchEntity Wifiap => new(_haContext, "switch.wifiap");
    ///<summary>Windows device</summary>
    public SwitchEntity WindowsDevice => new(_haContext, "switch.windows_device");
    ///<summary>Xbox-SystemOS (Xbox One)</summary>
    public SwitchEntity XboxSystemosXboxOne => new(_haContext, "switch.xbox_systemos_xbox_one");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Firmware</summary>
    public UpdateEntity Co2sensorFirmware => new(_haContext, "update.co2sensor_firmware");
    ///<summary>Db1 Water Level Firmware</summary>
    public UpdateEntity Db1WaterLevelFirmware => new(_haContext, "update.db1_water_level_firmware");
    ///<summary>Db2 Water Level Firmware</summary>
    public UpdateEntity Db2WaterLevelFirmware => new(_haContext, "update.db2_water_level_firmware");
    ///<summary>Db3 Water Level Firmware</summary>
    public UpdateEntity Db3WaterLevelFirmware => new(_haContext, "update.db3_water_level_firmware");
    ///<summary>Db4 Water Level Firmware</summary>
    public UpdateEntity Db4WaterLevelFirmware => new(_haContext, "update.db4_water_level_firmware");
    ///<summary>Db5 Water Level Firmware</summary>
    public UpdateEntity Db5WaterLevelFirmware => new(_haContext, "update.db5_water_level_firmware");
    ///<summary>Db6 Water Level Firmware</summary>
    public UpdateEntity Db6WaterLevelFirmware => new(_haContext, "update.db6_water_level_firmware");
    ///<summary>ESPHome Update</summary>
    public UpdateEntity EsphomeUpdate => new(_haContext, "update.esphome_update");
    ///<summary>File editor Update</summary>
    public UpdateEntity FileEditorUpdate => new(_haContext, "update.file_editor_update");
    ///<summary>Fresh Res Water Level Firmware</summary>
    public UpdateEntity FreshResWaterLevelFirmware => new(_haContext, "update.fresh_res_water_level_firmware");
    ///<summary>Gh Camera Firmware</summary>
    public UpdateEntity GhCameraFirmware => new(_haContext, "update.gh_camera_firmware");
    ///<summary>Ghbacklight Firmware</summary>
    public UpdateEntity GhbacklightFirmware => new(_haContext, "update.ghbacklight_firmware");
    ///<summary>Ghlightfront Firmware</summary>
    public UpdateEntity GhlightfrontFirmware => new(_haContext, "update.ghlightfront_firmware");
    ///<summary>Ghtemp2 Firmware</summary>
    public UpdateEntity Ghtemp2Firmware => new(_haContext, "update.ghtemp2_firmware");
    ///<summary>Grafana Update</summary>
    public UpdateEntity GrafanaUpdate => new(_haContext, "update.grafana_update");
    ///<summary>Greenhousetemp Firmware</summary>
    public UpdateEntity GreenhousetempFirmware => new(_haContext, "update.greenhousetemp_firmware");
    ///<summary>Home Assistant Core Update</summary>
    public UpdateEntity HomeAssistantCoreUpdate => new(_haContext, "update.home_assistant_core_update");
    ///<summary>Home Assistant Operating System Update</summary>
    public UpdateEntity HomeAssistantOperatingSystemUpdate => new(_haContext, "update.home_assistant_operating_system_update");
    ///<summary>Home Assistant Supervisor Update</summary>
    public UpdateEntity HomeAssistantSupervisorUpdate => new(_haContext, "update.home_assistant_supervisor_update");
    ///<summary>InfluxDB Update</summary>
    public UpdateEntity InfluxdbUpdate => new(_haContext, "update.influxdb_update");
    ///<summary>Mosquitto broker Update</summary>
    public UpdateEntity MosquittoBrokerUpdate => new(_haContext, "update.mosquitto_broker_update");
    ///<summary>NetDaemon V3.1 (.NET 7) Update</summary>
    public UpdateEntity NetdaemonV31Net7Update => new(_haContext, "update.netdaemon_v3_1_net_7_update");
    ///<summary>Nft Water Level Firmware</summary>
    public UpdateEntity NftWaterLevelFirmware => new(_haContext, "update.nft_water_level_firmware");
    ///<summary>Node-RED Update</summary>
    public UpdateEntity NodeRedUpdate => new(_haContext, "update.node_red_update");
    ///<summary>Peristalticnutrients Firmware</summary>
    public UpdateEntity PeristalticnutrientsFirmware => new(_haContext, "update.peristalticnutrients_firmware");
    ///<summary>Powerstrip Mid Firmware</summary>
    public UpdateEntity PowerstripMidFirmware => new(_haContext, "update.powerstrip_mid_firmware");
    ///<summary>Powerstripne Firmware</summary>
    public UpdateEntity PowerstripneFirmware => new(_haContext, "update.powerstripne_firmware");
    ///<summary>Powerstriptestzone Firmware</summary>
    public UpdateEntity PowerstriptestzoneFirmware => new(_haContext, "update.powerstriptestzone_firmware");
    ///<summary>Pwstrip1 Firmware</summary>
    public UpdateEntity Pwstrip1Firmware => new(_haContext, "update.pwstrip1_firmware");
    ///<summary>Samba share Update</summary>
    public UpdateEntity SambaShareUpdate => new(_haContext, "update.samba_share_update");
    ///<summary>Sbasic1 Firmware</summary>
    public UpdateEntity Sbasic1Firmware => new(_haContext, "update.sbasic1_firmware");
    ///<summary>Sonoff4Chz1 Firmware</summary>
    public UpdateEntity Sonoff4chz1Firmware => new(_haContext, "update.sonoff4chz1_firmware");
    ///<summary>Sonoff4Chz2 Firmware</summary>
    public UpdateEntity Sonoff4chz2Firmware => new(_haContext, "update.sonoff4chz2_firmware");
    ///<summary>Sonoff4Chz3 Firmware</summary>
    public UpdateEntity Sonoff4chz3Firmware => new(_haContext, "update.sonoff4chz3_firmware");
    ///<summary>Station4 Firmware</summary>
    public UpdateEntity Station4Firmware => new(_haContext, "update.station4_firmware");
    ///<summary>Swp Cool Water Level Firmware</summary>
    public UpdateEntity SwpCoolWaterLevelFirmware => new(_haContext, "update.swp_cool_water_level_firmware");
    ///<summary>Terminal &amp; SSH Update</summary>
    public UpdateEntity TerminalSshUpdate => new(_haContext, "update.terminal_ssh_update");
    ///<summary>Test Node Water Level Firmware</summary>
    public UpdateEntity TestNodeWaterLevelFirmware => new(_haContext, "update.test_node_water_level_firmware");
    ///<summary>Testingbucketsf4Ch Firmware</summary>
    public UpdateEntity Testingbucketsf4chFirmware => new(_haContext, "update.testingbucketsf4ch_firmware");
    ///<summary>Watermonitor Firmware</summary>
    public UpdateEntity WatermonitorFirmware => new(_haContext, "update.watermonitor_firmware");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Forecast Home</summary>
    public WeatherEntity Home => new(_haContext, "weather.home");
    ///<summary>OpenWeatherMap</summary>
    public WeatherEntity Openweathermap => new(_haContext, "weather.openweathermap");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Home</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>, ILightEntityCore
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("system")]
    public string? System { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>, IMediaPlayerEntityCore
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("app_id")]
    public string? AppId { get; init; }

    [JsonPropertyName("app_name")]
    public string? AppName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public string? EntityPictureLocal { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("media_image_url")]
    public string? MediaImageUrl { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("sound_mode_list")]
    public IReadOnlyList<string>? SoundModeList { get; init; }

    [JsonPropertyName("media_track")]
    public object? MediaTrack { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("adb_response")]
    public object? AdbResponse { get; init; }

    [JsonPropertyName("hdmi_input")]
    public object? HdmiInput { get; init; }

    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }

    [JsonPropertyName("sound_mode_raw")]
    public string? SoundModeRaw { get; init; }
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>, IAutomationEntityCore
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>, IBinarySensorEntityCore
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("system")]
    public string? System { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>, IButtonEntityCore
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record CalendarEntity : Entity<CalendarEntity, EntityState<CalendarAttributes>, CalendarAttributes>, ICalendarEntityCore
{
    public CalendarEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CalendarEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CalendarAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>, ICameraEntityCore
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>, IDeviceTrackerEntityCore
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("uuid")]
    public string? Uuid { get; init; }

    [JsonPropertyName("major")]
    public double? Major { get; init; }

    [JsonPropertyName("minor")]
    public double? Minor { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("connected_ap")]
    public string? ConnectedAp { get; init; }

    [JsonPropertyName("ip_address")]
    public string? IpAddress { get; init; }

    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    [JsonPropertyName("system")]
    public string? System { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>, IInputBooleanEntityCore
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputNumberEntity : NumericEntity<InputNumberEntity, NumericEntityState<InputNumberAttributes>, InputNumberAttributes>, IInputNumberEntityCore
{
    public InputNumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputNumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputNumberAttributes
{
    [JsonPropertyName("initial")]
    public object? Initial { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputSelectEntity : Entity<InputSelectEntity, EntityState<InputSelectAttributes>, InputSelectAttributes>, IInputSelectEntityCore
{
    public InputSelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputSelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputSelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<object>? DeviceTrackers { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record RemoteEntity : Entity<RemoteEntity, EntityState<RemoteAttributes>, RemoteAttributes>, IRemoteEntityCore
{
    public RemoteEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public RemoteEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record RemoteAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ScriptEntity : Entity<ScriptEntity, EntityState<ScriptAttributes>, ScriptAttributes>, IScriptEntityCore
{
    public ScriptEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ScriptEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ScriptAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("number_of_loaded_apps")]
    public double? NumberOfLoadedApps { get; init; }

    [JsonPropertyName("number_of_running_apps")]
    public double? NumberOfRunningApps { get; init; }

    [JsonPropertyName("version")]
    public string? Version { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("info")]
    public string? Info { get; init; }

    [JsonPropertyName("serial")]
    public string? Serial { get; init; }

    [JsonPropertyName("location")]
    public string? Location { get; init; }

    [JsonPropertyName("state_message")]
    public object? StateMessage { get; init; }

    [JsonPropertyName("state_reason")]
    public object? StateReason { get; init; }

    [JsonPropertyName("command_set")]
    public string? CommandSet { get; init; }

    [JsonPropertyName("uri_supported")]
    public string? UriSupported { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>, ISensorEntityCore
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("last_period")]
    public string? LastPeriod { get; init; }

    [JsonPropertyName("last_valid_state")]
    public string? LastValidState { get; init; }

    [JsonPropertyName("meter_period")]
    public string? MeterPeriod { get; init; }

    [JsonPropertyName("cron pattern")]
    public string? Cronpattern { get; init; }

    [JsonPropertyName("last_reset")]
    public string? LastReset { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("marker_high_level")]
    public double? MarkerHighLevel { get; init; }

    [JsonPropertyName("marker_low_level")]
    public double? MarkerLowLevel { get; init; }

    [JsonPropertyName("marker_type")]
    public string? MarkerType { get; init; }

    [JsonPropertyName("repositories")]
    public IReadOnlyList<object>? Repositories { get; init; }

    [JsonPropertyName("uuid")]
    public string? Uuid { get; init; }

    [JsonPropertyName("major")]
    public double? Major { get; init; }

    [JsonPropertyName("minor")]
    public double? Minor { get; init; }

    [JsonPropertyName("system")]
    public string? System { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>, ISunEntityCore
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>, ISwitchEntityCore
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("runtime_info")]
    public object? RuntimeInfo { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("prioritized")]
    public bool? Prioritized { get; init; }

    [JsonPropertyName("prioritized_end")]
    public string? PrioritizedEnd { get; init; }

    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    [JsonPropertyName("ip")]
    public string? Ip { get; init; }

    [JsonPropertyName("transmit_speed_mbitps")]
    public double? TransmitSpeedMbitps { get; init; }

    [JsonPropertyName("receive_speed_mbitps")]
    public double? ReceiveSpeedMbitps { get; init; }

    [JsonPropertyName("network")]
    public string? Network { get; init; }

    [JsonPropertyName("system")]
    public string? System { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>, IUpdateEntityCore
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public bool? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public string? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public object? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>, IWeatherEntityCore
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("apparent_temperature")]
    public double? ApparentTemperature { get; init; }

    [JsonPropertyName("dew_point")]
    public double? DewPoint { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("cloud_coverage")]
    public double? CloudCoverage { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_gust_speed")]
    public double? WindGustSpeed { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("forecast")]
    public IReadOnlyList<object>? Forecast { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>, IZoneEntityCore
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<object>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AlarmControlPanelServices AlarmControlPanel { get; }

    AutomationServices Automation { get; }

    ButtonServices Button { get; }

    CalendarServices Calendar { get; }

    CameraServices Camera { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    EsphomeServices Esphome { get; }

    FanServices Fan { get; }

    FrontendServices Frontend { get; }

    GooglewifiServices Googlewifi { get; }

    GroupServices Group { get; }

    HassioServices Hassio { get; }

    HumidifierServices Humidifier { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LawnMowerServices LawnMower { get; }

    LightServices Light { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MediaPlayerServices MediaPlayer { get; }

    MqttServices Mqtt { get; }

    NetdaemonServices Netdaemon { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    SirenServices Siren { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TemplateServices Template { get; }

    TextServices Text { get; }

    TimerServices Timer { get; }

    TtsServices Tts { get; }

    UpdateServices Update { get; }

    UtilityMeterServices UtilityMeter { get; }

    VacuumServices Vacuum { get; }

    WaterHeaterServices WaterHeater { get; }

    WeatherServices Weather { get; }

    ZoneServices Zone { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CalendarServices Calendar => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public EsphomeServices Esphome => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GooglewifiServices Googlewifi => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HassioServices Hassio => new(_haContext);
    public HumidifierServices Humidifier => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LawnMowerServices LawnMower => new(_haContext);
    public LightServices Light => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public NetdaemonServices Netdaemon => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TemplateServices Template => new(_haContext);
    public TextServices Text => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public UtilityMeterServices UtilityMeter => new(_haContext);
    public VacuumServices Vacuum => new(_haContext);
    public WaterHeaterServices WaterHeater => new(_haContext);
    public WeatherServices Weather => new(_haContext);
    public ZoneServices Zone => new(_haContext);
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>Code to disarm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("automation", "reload", null);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("automation", "toggle", target);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("automation", "turn_on", target);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("button", "press", target);
    }
}

public partial class CalendarServices
{
    private readonly IHaContext _haContext;
    public CalendarServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, CalendarCreateEventParameters data)
    {
        _haContext.CallService("calendar", "create_event", target, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("calendar", "create_event", target, new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public void ListEvents(ServiceTarget target, CalendarListEventsParameters data)
    {
        _haContext.CallService("calendar", "list_events", target, data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public void ListEvents(ServiceTarget target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        _haContext.CallService("calendar", "list_events", target, new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public partial record CalendarCreateEventParameters
{
    ///<summary>Defines the short summary or subject for the event. eg: Department Party</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>The date the all-day event should start. eg: 2022-03-22</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>The date the all-day event should end (exclusive). eg: 2022-03-23</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial record CalendarListEventsParameters
{
    ///<summary>Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>Returns active events from start_date_time until the specified duration.</summary>
    [JsonPropertyName("duration")]
    public object? Duration { get; init; }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "disable_motion_detection", target);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "enable_motion_detection", target);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, long? duration = null, long? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_off", target);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_on", target);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public long? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_off", target);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_on", target);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: horizontal</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>Target temperature.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>High target temperature.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>Low target temperature.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by using Home Assistant Cloud.</summary>
    public void RemoteConnect()
    {
        _haContext.CallService("cloud", "remote_connect", null);
    }

    ///<summary>Disconnects the Home Assistant UI from the Home Assistant Cloud. You will no longer be able to access your Home Assistant instance from outside your local network.</summary>
    public void RemoteDisconnect()
    {
        _haContext.CallService("cloud", "remote_disconnect", null);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    public void Process(string text, string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void Configure()
    {
        _haContext.CallService("counter", "configure", null);
    }

    ///<summary>Decrements a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("counter", "decrement", target);
    }

    ///<summary>Increments a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("counter", "increment", target);
    }

    ///<summary>Resets a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("counter", "reset", target);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, long value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public long? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover", target);
    }

    ///<summary>Tilts a cover to close.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover_tilt", target);
    }

    ///<summary>Opens a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover", target);
    }

    ///<summary>Tilts a cover open.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover_tilt", target);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Target position.</param>
    public void SetCoverPosition(ServiceTarget target, long position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public void SetCoverTiltPosition(ServiceTarget target, long tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover", target);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle", target);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public long? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Target tilt positition.</summary>
    [JsonPropertyName("tilt_position")]
    public long? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Records a seen tracked device.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Records a seen tracked device.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, long? gpsAccuracy = null, long? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public long? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public long? Battery { get; init; }
}

public partial class EsphomeServices
{
    private readonly IHaContext _haContext;
    public EsphomeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Calls the service nutrientpump1 of the node peristalticnutrients</summary>
    public void PeristalticnutrientsNutrientpump1(EsphomePeristalticnutrientsNutrientpump1Parameters data)
    {
        _haContext.CallService("esphome", "peristalticnutrients_nutrientpump1", null, data);
    }

    ///<summary>Calls the service nutrientpump1 of the node peristalticnutrients</summary>
    ///<param name="target"> eg: 42</param>
    public void PeristalticnutrientsNutrientpump1(long target)
    {
        _haContext.CallService("esphome", "peristalticnutrients_nutrientpump1", null, new EsphomePeristalticnutrientsNutrientpump1Parameters { Target = target });
    }

    ///<summary>Calls the service nutrientpump2 of the node peristalticnutrients</summary>
    public void PeristalticnutrientsNutrientpump2(EsphomePeristalticnutrientsNutrientpump2Parameters data)
    {
        _haContext.CallService("esphome", "peristalticnutrients_nutrientpump2", null, data);
    }

    ///<summary>Calls the service nutrientpump2 of the node peristalticnutrients</summary>
    ///<param name="target"> eg: 42</param>
    public void PeristalticnutrientsNutrientpump2(long target)
    {
        _haContext.CallService("esphome", "peristalticnutrients_nutrientpump2", null, new EsphomePeristalticnutrientsNutrientpump2Parameters { Target = target });
    }

    ///<summary>Calls the service nutrientpump3 of the node peristalticnutrients</summary>
    public void PeristalticnutrientsNutrientpump3(EsphomePeristalticnutrientsNutrientpump3Parameters data)
    {
        _haContext.CallService("esphome", "peristalticnutrients_nutrientpump3", null, data);
    }

    ///<summary>Calls the service nutrientpump3 of the node peristalticnutrients</summary>
    ///<param name="target"> eg: 42</param>
    public void PeristalticnutrientsNutrientpump3(long target)
    {
        _haContext.CallService("esphome", "peristalticnutrients_nutrientpump3", null, new EsphomePeristalticnutrientsNutrientpump3Parameters { Target = target });
    }
}

public partial record EsphomePeristalticnutrientsNutrientpump1Parameters
{
    ///<summary> eg: 42</summary>
    [JsonPropertyName("target")]
    public long? Target { get; init; }
}

public partial record EsphomePeristalticnutrientsNutrientpump2Parameters
{
    ///<summary> eg: 42</summary>
    [JsonPropertyName("target")]
    public long? Target { get; init; }
}

public partial record EsphomePeristalticnutrientsNutrientpump3Parameters
{
    ///<summary> eg: 42</summary>
    [JsonPropertyName("target")]
    public long? Target { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Decreases the speed by a percentage step.</param>
    public void DecreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Increases the speed by a percentage step.</param>
    public void IncreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="oscillating">Turn on/off oscillation.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="direction">Direction to rotate.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    public void SetPercentage(ServiceTarget target, long percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles the fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("fan", "toggle", target);
    }

    ///<summary>Turns fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("fan", "turn_off", target);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void TurnOn(ServiceTarget target, long? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Decreases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Increases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Turn on/off oscillation.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>Direction to rotate.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }

    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes()
    {
        _haContext.CallService("frontend", "reload_themes", null);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GooglewifiServices
{
    private readonly IHaContext _haContext;
    public GooglewifiServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Prioritize a Google Wifi Client Device for x hours</summary>
    public void Prioritize(GooglewifiPrioritizeParameters data)
    {
        _haContext.CallService("googlewifi", "prioritize", null, data);
    }

    ///<summary>Prioritize a Google Wifi Client Device for x hours</summary>
    ///<param name="entityId">The entity ID of the device you would like to prioritize. eg: switch.iPhone</param>
    ///<param name="duration">The duration in hours that you would like the prioritization to last. eg: 4</param>
    public void Prioritize(object? entityId = null, object? duration = null)
    {
        _haContext.CallService("googlewifi", "prioritize", null, new GooglewifiPrioritizeParameters { EntityId = entityId, Duration = duration });
    }

    ///<summary>Clear any device prioritizations on the Google Wifi system.</summary>
    public void PrioritizeReset(GooglewifiPrioritizeResetParameters data)
    {
        _haContext.CallService("googlewifi", "prioritize_reset", null, data);
    }

    ///<summary>Clear any device prioritizations on the Google Wifi system.</summary>
    ///<param name="entityId">A switch entity ID from the Google Wifi System you want to clear. eg: switch.iPhone</param>
    public void PrioritizeReset(object? entityId = null)
    {
        _haContext.CallService("googlewifi", "prioritize_reset", null, new GooglewifiPrioritizeResetParameters { EntityId = entityId });
    }

    ///<summary>Reset a Google Wifi Access Point or the System</summary>
    public void Reset(GooglewifiResetParameters data)
    {
        _haContext.CallService("googlewifi", "reset", null, data);
    }

    ///<summary>Reset a Google Wifi Access Point or the System</summary>
    ///<param name="entityId">Access point or system to restart eg: binary_sensor.this_access_point</param>
    public void Reset(object? entityId = null)
    {
        _haContext.CallService("googlewifi", "reset", null, new GooglewifiResetParameters { EntityId = entityId });
    }

    ///<summary>Run a WLAN speed test on the Google Wifi system.</summary>
    public void SpeedTest(GooglewifiSpeedTestParameters data)
    {
        _haContext.CallService("googlewifi", "speed_test", null, data);
    }

    ///<summary>Run a WLAN speed test on the Google Wifi system.</summary>
    ///<param name="entityId">The entity id of a speed sensor on the system you want to test. eg: sensor.googlewifi_system_upload_speed</param>
    public void SpeedTest(object? entityId = null)
    {
        _haContext.CallService("googlewifi", "speed_test", null, new GooglewifiSpeedTestParameters { EntityId = entityId });
    }
}

public partial record GooglewifiPrioritizeParameters
{
    ///<summary>The entity ID of the device you would like to prioritize. eg: switch.iPhone</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The duration in hours that you would like the prioritization to last. eg: 4</summary>
    [JsonPropertyName("duration")]
    public object? Duration { get; init; }
}

public partial record GooglewifiPrioritizeResetParameters
{
    ///<summary>A switch entity ID from the Google Wifi System you want to clear. eg: switch.iPhone</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial record GooglewifiResetParameters
{
    ///<summary>Access point or system to restart eg: binary_sensor.this_access_point</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial record GooglewifiSpeedTestParameters
{
    ///<summary>The entity id of a speed sensor on the system you want to test. eg: sensor.googlewifi_system_upload_speed</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads group configuration, entities, and notify services from YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("group", "reload", null);
    }

    ///<summary>Removes a group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Removes a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters { ObjectId = objectId });
    }

    ///<summary>Creates/Updates a user group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Creates/Updates a user group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    ///<param name="name">Name of the group. eg: My test group</param>
    ///<param name="icon">Name of the icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only be used when all entities are in state `on`.</param>
    public void Set(string objectId, string? name = null, object? icon = null, object? entities = null, object? addEntities = null, object? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters { ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all });
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of the group. eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of the icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public object? AddEntities { get; init; }

    ///<summary>List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public object? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only be used when all entities are in state `on`.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HassioServices
{
    private readonly IHaContext _haContext;
    public HassioServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Restarts an add-on.</summary>
    public void AddonRestart(HassioAddonRestartParameters data)
    {
        _haContext.CallService("hassio", "addon_restart", null, data);
    }

    ///<summary>Restarts an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonRestart(object addon)
    {
        _haContext.CallService("hassio", "addon_restart", null, new HassioAddonRestartParameters { Addon = addon });
    }

    ///<summary>Starts an add-on.</summary>
    public void AddonStart(HassioAddonStartParameters data)
    {
        _haContext.CallService("hassio", "addon_start", null, data);
    }

    ///<summary>Starts an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStart(object addon)
    {
        _haContext.CallService("hassio", "addon_start", null, new HassioAddonStartParameters { Addon = addon });
    }

    ///<summary>Writes data to add-on stdin.</summary>
    public void AddonStdin(HassioAddonStdinParameters data)
    {
        _haContext.CallService("hassio", "addon_stdin", null, data);
    }

    ///<summary>Writes data to add-on stdin.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStdin(object addon)
    {
        _haContext.CallService("hassio", "addon_stdin", null, new HassioAddonStdinParameters { Addon = addon });
    }

    ///<summary>Stops an add-on.</summary>
    public void AddonStop(HassioAddonStopParameters data)
    {
        _haContext.CallService("hassio", "addon_stop", null, data);
    }

    ///<summary>Stops an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStop(object addon)
    {
        _haContext.CallService("hassio", "addon_stop", null, new HassioAddonStopParameters { Addon = addon });
    }

    ///<summary>Updates an add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    public void AddonUpdate(HassioAddonUpdateParameters data)
    {
        _haContext.CallService("hassio", "addon_update", null, data);
    }

    ///<summary>Updates an add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonUpdate(object addon)
    {
        _haContext.CallService("hassio", "addon_update", null, new HassioAddonUpdateParameters { Addon = addon });
    }

    ///<summary>Creates a full backup.</summary>
    public void BackupFull(HassioBackupFullParameters data)
    {
        _haContext.CallService("hassio", "backup_full", null, data);
    }

    ///<summary>Creates a full backup.</summary>
    ///<param name="name">Optional (default = current date and time). eg: Backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupFull(string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_full", null, new HassioBackupFullParameters { Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Creates a partial backup.</summary>
    public void BackupPartial(HassioBackupPartialParameters data)
    {
        _haContext.CallService("hassio", "backup_partial", null, data);
    }

    ///<summary>Creates a partial backup.</summary>
    ///<param name="homeassistant">Includes Home Assistant settings in the backup.</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="name">Optional (default = current date and time). eg: Partial backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupPartial(bool? homeassistant = null, object? addons = null, object? folders = null, string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_partial", null, new HassioBackupPartialParameters { Homeassistant = homeassistant, Addons = addons, Folders = folders, Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Reboots the host system.</summary>
    public void HostReboot()
    {
        _haContext.CallService("hassio", "host_reboot", null);
    }

    ///<summary>Powers off the host system.</summary>
    public void HostShutdown()
    {
        _haContext.CallService("hassio", "host_shutdown", null);
    }

    ///<summary>Restores from full backup.</summary>
    public void RestoreFull(HassioRestoreFullParameters data)
    {
        _haContext.CallService("hassio", "restore_full", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestoreFull(string slug, string? password = null)
    {
        _haContext.CallService("hassio", "restore_full", null, new HassioRestoreFullParameters { Slug = slug, Password = password });
    }

    ///<summary>Restores from a partial backup.</summary>
    public void RestorePartial(HassioRestorePartialParameters data)
    {
        _haContext.CallService("hassio", "restore_partial", null, data);
    }

    ///<summary>Restores from a partial backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="homeassistant">Restores Home Assistant.</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestorePartial(string slug, bool? homeassistant = null, object? folders = null, object? addons = null, string? password = null)
    {
        _haContext.CallService("hassio", "restore_partial", null, new HassioRestorePartialParameters { Slug = slug, Homeassistant = homeassistant, Folders = folders, Addons = addons, Password = password });
    }
}

public partial record HassioAddonRestartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStdinParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStopParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonUpdateParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioBackupFullParameters
{
    ///<summary>Optional (default = current date and time). eg: Backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioBackupPartialParameters
{
    ///<summary>Includes Home Assistant settings in the backup.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional (default = current date and time). eg: Partial backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioRestoreFullParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial record HassioRestorePartialParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Restores Home Assistant.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class HumidifierServices
{
    private readonly IHaContext _haContext;
    public HumidifierServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, HumidifierSetHumidityParameters data)
    {
        _haContext.CallService("humidifier", "set_humidity", target, data);
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("humidifier", "set_humidity", target, new HumidifierSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMode(ServiceTarget target, HumidifierSetModeParameters data)
    {
        _haContext.CallService("humidifier", "set_mode", target, data);
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mode">Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation. eg: away</param>
    public void SetMode(ServiceTarget target, string mode)
    {
        _haContext.CallService("humidifier", "set_mode", target, new HumidifierSetModeParameters { Mode = mode });
    }

    ///<summary>Toggles the humidifier on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "toggle", target);
    }

    ///<summary>Turns the humidifier off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_off", target);
    }

    ///<summary>Turns the humidifier on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_on", target);
    }
}

public partial record HumidifierSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record HumidifierSetModeParameters
{
    ///<summary>Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation. eg: away</summary>
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_boolean", "reload", null);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "toggle", target);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_off", target);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_on", target);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("input_button", "press", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_button", "reload", null);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_datetime", "reload", null);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public long? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("input_number", "decrement", target);
    }

    ///<summary>Increments the value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("input_number", "increment", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_number", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_select", "reload", null);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_last", target);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, object options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_text", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LawnMowerServices
{
    private readonly IHaContext _haContext;
    public LawnMowerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the mowing task and returns to the dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Dock(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "dock", target);
    }

    ///<summary>Pauses the mowing task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "pause", target);
    }

    ///<summary>Starts the mowing task.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartMowing(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "start_mowing", target);
    }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public void Toggle(ServiceTarget target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public void TurnOff(ServiceTarget target, long? transition = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public void TurnOn(ServiceTarget target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>A human-readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Set the light to white mode.</summary>
    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary>The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    ///<summary>A human-readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Change brightness by an amount.</summary>
    [JsonPropertyName("brightness_step")]
    public long? BrightnessStep { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public long? BrightnessStepPct { get; init; }

    ///<summary>Set the light to white mode.</summary>
    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters { Code = code });
    }
}

public partial record LockLockParameters
{
    ///<summary>Code used to lock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>Code used to open the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>Code used to unlock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel()
    {
        _haContext.CallService("logger", "set_level", null);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears the playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target)
    {
        _haContext.CallService("media_player", "clear_playlist", target);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, IEnumerable<string> groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_next_track", target);
    }

    ///<summary>Pauses.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_pause", target);
    }

    ///<summary>Starts playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play", target);
    }

    ///<summary>Toggles play/pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play_pause", target);
    }

    ///<summary>Selects the previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_previous_track", target);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_stop", target);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("media_player", "toggle", target);
    }

    ///<summary>Turns off the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_off", target);
    }

    ///<summary>Turns on the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_on", target);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target)
    {
        _haContext.CallService("media_player", "unjoin", target);
    }

    ///<summary>Turns down the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_down", target);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_up", target);
    }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public IEnumerable<string>? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Target position in the currently playing media. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Repeat mode to set.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>Whether or not shuffle mode is enabled.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>Defines whether or not it is muted.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    ///<param name="topic">Topic to listen to. eg: OpenZWave/#</param>
    ///<param name="duration">How long we should listen for messages in seconds.</param>
    public void Dump(string? topic = null, long? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish to. eg: /homeassistant/hello</param>
    ///<param name="payload">The payload to publish. eg: This is great</param>
    ///<param name="payloadTemplate">Template to render as a payload value. If a payload is provided, the template is ignored. eg: {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="qos">Quality of Service to use. O. At most once. 1: At least once. 2: Exactly once.</param>
    ///<param name="retain">If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</param>
    public void Publish(string topic, string? payload = null, object? payloadTemplate = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, PayloadTemplate = payloadTemplate, Qos = qos, Retain = retain });
    }

    ///<summary>Reloads MQTT entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("mqtt", "reload", null);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>Topic to listen to. eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>How long we should listen for messages in seconds.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish to. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>The payload to publish. eg: This is great</summary>
    [JsonPropertyName("payload")]
    public string? Payload { get; init; }

    ///<summary>Template to render as a payload value. If a payload is provided, the template is ignored. eg: {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload_template")]
    public object? PayloadTemplate { get; init; }

    ///<summary>Quality of Service to use. O. At most once. 1: At least once. 2: Exactly once.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class NetdaemonServices
{
    private readonly IHaContext _haContext;
    public NetdaemonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void Addnutrients()
    {
        _haContext.CallService("netdaemon", "addnutrients", null);
    }

    public void Addonedosetocurrentzone()
    {
        _haContext.CallService("netdaemon", "addonedosetocurrentzone", null);
    }

    ///<summary>Create an entity</summary>
    public void EntityCreate(NetdaemonEntityCreateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_create", null, data);
    }

    ///<summary>Create an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityCreate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_create", null, new NetdaemonEntityCreateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Remove an entity</summary>
    public void EntityRemove(NetdaemonEntityRemoveParameters data)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, data);
    }

    ///<summary>Remove an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    public void EntityRemove(object? entityId = null)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, new NetdaemonEntityRemoveParameters { EntityId = entityId });
    }

    ///<summary>Update an entity</summary>
    public void EntityUpdate(NetdaemonEntityUpdateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_update", null, data);
    }

    ///<summary>Update an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityUpdate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_update", null, new NetdaemonEntityUpdateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    public void HeatCurrentZone()
    {
        _haContext.CallService("netdaemon", "heat_current_zone", null);
    }

    public void Refillcurrentzone()
    {
        _haContext.CallService("netdaemon", "refillcurrentzone", null);
    }

    public void Refillswpcooler()
    {
        _haContext.CallService("netdaemon", "refillswpcooler", null);
    }

    public void Refillwatertank()
    {
        _haContext.CallService("netdaemon", "refillwatertank", null);
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    public void RegisterService(NetdaemonRegisterServiceParameters data)
    {
        _haContext.CallService("netdaemon", "register_service", null, data);
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    ///<param name="service">The name of the service to register</param>
    ///<param name="class">The class that implements the service call</param>
    ///<param name="method">The method to call</param>
    public void RegisterService(object? service = null, object? @class = null, object? @method = null)
    {
        _haContext.CallService("netdaemon", "register_service", null, new NetdaemonRegisterServiceParameters { Service = service, Class = @class, Method = @method });
    }

    public void ReloadApps()
    {
        _haContext.CallService("netdaemon", "reload_apps", null);
    }

    public void Rundumprutineforcurrentzone()
    {
        _haContext.CallService("netdaemon", "rundumprutineforcurrentzone", null);
    }
}

public partial record NetdaemonEntityCreateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonEntityRemoveParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial record NetdaemonEntityUpdateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonRegisterServiceParameters
{
    ///<summary>The name of the service to register</summary>
    [JsonPropertyName("service")]
    public object? Service { get; init; }

    ///<summary>The class that implements the service call</summary>
    [JsonPropertyName("class")]
    public object? Class { get; init; }

    ///<summary>The method to call</summary>
    [JsonPropertyName("method")]
    public object? Method { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the mobile_app_samsungflex integration.</summary>
    public void MobileAppSamsungflex(NotifyMobileAppSamsungflexParameters data)
    {
        _haContext.CallService("notify", "mobile_app_samsungflex", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_samsungflex integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppSamsungflex(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_samsungflex", null, new NotifyMobileAppSamsungflexParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the **Notifications** panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the **Notifications** panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }
}

public partial record NotifyMobileAppSamsungflexParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string? value = null)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the **Notifications** panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the **Notifications** panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Removes a notification from the **Notifications** panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Removes a notification from the **Notifications** panel.</summary>
    ///<param name="notificationId">ID of the notification to be removed. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Removes all notifications from the **Notifications** panel.</summary>
    public void DismissAll()
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be removed. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("person", "reload", null);
    }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable()
    {
        _haContext.CallService("recorder", "disable", null);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable()
    {
        _haContext.CallService("recorder", "enable", null);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Applys `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(long? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    public void PurgeEntities(ServiceTarget target, RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", target, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(ServiceTarget target, object? domains = null, object? entityGlobs = null, long? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", target, new RecorderPurgeEntitiesParameters { Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Applys `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of domains for which the data needs to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("remote", "toggle", target);
    }

    ///<summary>Turns the device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("remote", "turn_off", target);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters { Activity = activity });
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>The single command or the list of commands to be deleted. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the commands.</summary>
    [JsonPropertyName("num_repeats")]
    public long? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or activity name to be started. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, long? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, object? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("scene", "reload", null);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, long? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public object? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("schedule", "reload", null);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void AddDoseToCurrentZone()
    {
        _haContext.CallService("script", "add_dose_to_current_zone", null);
    }

    public void MovePump1()
    {
        _haContext.CallService("script", "move_pump_1", null);
    }

    public void MovePump2()
    {
        _haContext.CallService("script", "move_pump_2", null);
    }

    public void MovePump3()
    {
        _haContext.CallService("script", "move_pump_3", null);
    }

    public void RefillCurrentBucket()
    {
        _haContext.CallService("script", "refill_current_bucket", null);
    }

    public void RefillFreshWaterTank()
    {
        _haContext.CallService("script", "refill_fresh_water_tank", null);
    }

    public void RefillSwpCooler()
    {
        _haContext.CallService("script", "refill_swp_cooler", null);
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload()
    {
        _haContext.CallService("script", "reload", null);
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("script", "toggle", target);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_off", target);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_on", target);
    }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("select", "select_last", target);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles the siren on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("siren", "toggle", target);
    }

    ///<summary>Turns the siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("siren", "turn_off", target);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>Number of seconds the sound is played. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("switch", "toggle", target);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_off", target);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_on", target);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears all log entries.</summary>
    public void Clear()
    {
        _haContext.CallService("system_log", "clear", null);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TemplateServices
{
    private readonly IHaContext _haContext;
    public TemplateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads template entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("template", "reload", null);
    }
}

public partial class TextServices
{
    private readonly IHaContext _haContext;
    public TextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TextSetValueParameters data)
    {
        _haContext.CallService("text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("text", "set_value", target, new TextSetValueParameters { Value = value });
    }
}

public partial record TextSetValueParameters
{
    ///<summary>Enter your text. eg: Hello world!</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cancels a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target)
    {
        _haContext.CallService("timer", "cancel", target);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target)
    {
        _haContext.CallService("timer", "finish", target);
    }

    ///<summary>Pauses a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("timer", "pause", target);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("timer", "reload", null);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache()
    {
        _haContext.CallService("tts", "clear_cache", null);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    public void GoogleTranslateSay(TtsGoogleTranslateSayParameters data)
    {
        _haContext.CallService("tts", "google_translate_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void GoogleTranslateSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "google_translate_say", null, new TtsGoogleTranslateSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsGoogleTranslateSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target)
    {
        _haContext.CallService("update", "clear_skipped", target);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target)
    {
        _haContext.CallService("update", "skip", target);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update .</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class UtilityMeterServices
{
    private readonly IHaContext _haContext;
    public UtilityMeterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    public void Calibrate(ServiceTarget target, UtilityMeterCalibrateParameters data)
    {
        _haContext.CallService("utility_meter", "calibrate", target, data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Value to which set the meter. eg: 100</param>
    public void Calibrate(ServiceTarget target, string value)
    {
        _haContext.CallService("utility_meter", "calibrate", target, new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("utility_meter", "reset", target);
    }
}

public partial record UtilityMeterCalibrateParameters
{
    ///<summary>Value to which set the meter. eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class VacuumServices
{
    private readonly IHaContext _haContext;
    public VacuumServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    ///<param name="target">The target for this service call</param>
    public void CleanSpot(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "clean_spot", target);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    ///<param name="target">The target for this service call</param>
    public void Locate(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "locate", target);
    }

    ///<summary>Pauses the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "pause", target);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReturnToBase(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "return_to_base", target);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, VacuumSendCommandParameters data)
    {
        _haContext.CallService("vacuum", "send_command", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public void SendCommand(ServiceTarget target, string command, object? @params = null)
    {
        _haContext.CallService("vacuum", "send_command", target, new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanSpeed(ServiceTarget target, VacuumSetFanSpeedParameters data)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public void SetFanSpeed(ServiceTarget target, string fanSpeed)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start", target);
    }

    ///<summary>Starts, pauses, or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartPause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start_pause", target);
    }

    ///<summary>Stops the current cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Stop(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "stop", target);
    }

    public void Toggle()
    {
        _haContext.CallService("vacuum", "toggle", null);
    }

    ///<summary>Stops the current cleaning task and returns to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "turn_off", target);
    }

    ///<summary>Starts a new cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "turn_on", target);
    }
}

public partial record VacuumSendCommandParameters
{
    ///<summary>Command to execute. The commands are integration-specific. eg: set_dnd_timer</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }
}

public partial record VacuumSetFanSpeedParameters
{
    ///<summary>Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</summary>
    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }
}

public partial class WaterHeaterServices
{
    private readonly IHaContext _haContext;
    public WaterHeaterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAwayMode(ServiceTarget target, WaterHeaterSetAwayModeParameters data)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="awayMode">New value of away mode.</param>
    public void SetAwayMode(ServiceTarget target, bool awayMode)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOperationMode(ServiceTarget target, WaterHeaterSetOperationModeParameters data)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetOperationMode(ServiceTarget target, string operationMode)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, WaterHeaterSetTemperatureParameters data)
    {
        _haContext.CallService("water_heater", "set_temperature", target, data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetTemperature(ServiceTarget target, double temperature, string? operationMode = null)
    {
        _haContext.CallService("water_heater", "set_temperature", target, new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("water_heater", "turn_off", target);
    }

    ///<summary>Turns water heater on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("water_heater", "turn_on", target);
    }
}

public partial record WaterHeaterSetAwayModeParameters
{
    ///<summary>New value of away mode.</summary>
    [JsonPropertyName("away_mode")]
    public bool? AwayMode { get; init; }
}

public partial record WaterHeaterSetOperationModeParameters
{
    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial record WaterHeaterSetTemperatureParameters
{
    ///<summary>New target temperature for the water heater.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial class WeatherServices
{
    private readonly IHaContext _haContext;
    public WeatherServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetForecast(ServiceTarget target, WeatherGetForecastParameters data)
    {
        _haContext.CallService("weather", "get_forecast", target, data);
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public void GetForecast(ServiceTarget target, object @type)
    {
        _haContext.CallService("weather", "get_forecast", target, new WeatherGetForecastParameters { Type = @type });
    }
}

public partial record WeatherGetForecastParameters
{
    ///<summary>Forecast type: daily, hourly or twice daily.</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("zone", "reload", null);
    }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IAutomationEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<IAutomationEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IAutomationEntityCore target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IAutomationEntityCore target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IAutomationEntityCore target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IAutomationEntityCore target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IAutomationEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IEnumerable<IAutomationEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this IButtonEntityCore target)
    {
        target.CallService("press");
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<IButtonEntityCore> target)
    {
        target.CallService("press");
    }
}

public static class CalendarEntityExtensionMethods
{
    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this ICalendarEntityCore target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this ICalendarEntityCore target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    public static void ListEvents(this ICalendarEntityCore target, CalendarListEventsParameters data)
    {
        target.CallService("list_events", data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    public static void ListEvents(this IEnumerable<ICalendarEntityCore> target, CalendarListEventsParameters data)
    {
        target.CallService("list_events", data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void ListEvents(this ICalendarEntityCore target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("list_events", new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void ListEvents(this IEnumerable<ICalendarEntityCore> target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("list_events", new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this ICameraEntityCore target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this ICameraEntityCore target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this ICameraEntityCore target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this ICameraEntityCore target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this ICameraEntityCore target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this IEnumerable<ICameraEntityCore> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this ICameraEntityCore target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this IEnumerable<ICameraEntityCore> target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this ICameraEntityCore target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this ICameraEntityCore target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this ICameraEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this ICameraEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IInputBooleanEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IInputBooleanEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IInputBooleanEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class InputNumberEntityExtensionMethods
{
    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IInputNumberEntityCore target)
    {
        target.CallService("decrement");
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IEnumerable<IInputNumberEntityCore> target)
    {
        target.CallService("decrement");
    }

    ///<summary>Increments the value by 1 step.</summary>
    public static void Increment(this IInputNumberEntityCore target)
    {
        target.CallService("increment");
    }

    ///<summary>Increments the value by 1 step.</summary>
    public static void Increment(this IEnumerable<IInputNumberEntityCore> target)
    {
        target.CallService("increment");
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputNumberEntityCore target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputNumberEntityCore to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IInputNumberEntityCore target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputNumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }
}

public static class InputSelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IInputSelectEntityCore target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<IInputSelectEntityCore> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IInputSelectEntityCore target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<IInputSelectEntityCore> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Select the next option.</summary>
    public static void SelectNext(this IInputSelectEntityCore target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next option.</summary>
    public static void SelectNext(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectNext(this IInputSelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectNext(this IEnumerable<IInputSelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IInputSelectEntityCore target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IInputSelectEntityCore target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<IInputSelectEntityCore> target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IInputSelectEntityCore target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectPrevious(this IInputSelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectPrevious(this IEnumerable<IInputSelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    public static void SetOptions(this IInputSelectEntityCore target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Sets the options.</summary>
    public static void SetOptions(this IEnumerable<IInputSelectEntityCore> target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IInputSelectEntityCore target, object options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IEnumerable<IInputSelectEntityCore> target, object options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this ILightEntityCore target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this ILightEntityCore target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public static void TurnOff(this ILightEntityCore target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this ILightEntityCore target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this IMediaPlayerEntityCore target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IMediaPlayerEntityCore target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IMediaPlayerEntityCore target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_play");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_play");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IMediaPlayerEntityCore target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IMediaPlayerEntityCore target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IMediaPlayerEntityCore target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IMediaPlayerEntityCore target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IMediaPlayerEntityCore target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IMediaPlayerEntityCore target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IMediaPlayerEntityCore target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IMediaPlayerEntityCore target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IMediaPlayerEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IMediaPlayerEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IMediaPlayerEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IMediaPlayerEntityCore target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IMediaPlayerEntityCore target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IMediaPlayerEntityCore target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IMediaPlayerEntityCore target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IMediaPlayerEntityCore target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IMediaPlayerEntityCore target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IMediaPlayerEntityCore target)
    {
        target.CallService("volume_up");
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("volume_up");
    }
}

public static class RemoteEntityExtensionMethods
{
    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IRemoteEntityCore target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IRemoteEntityCore target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IRemoteEntityCore target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IRemoteEntityCore target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IRemoteEntityCore target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IRemoteEntityCore target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device on/off.</summary>
    public static void Toggle(this IRemoteEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a device on/off.</summary>
    public static void Toggle(this IEnumerable<IRemoteEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns the device off.</summary>
    public static void TurnOff(this IRemoteEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns the device off.</summary>
    public static void TurnOff(this IEnumerable<IRemoteEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Sends the power on command.</summary>
    public static void TurnOn(this IRemoteEntityCore target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the power on command.</summary>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IRemoteEntityCore target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }
}

public static class ScriptEntityExtensionMethods
{
    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IScriptEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IEnumerable<IScriptEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IScriptEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IEnumerable<IScriptEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IScriptEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IEnumerable<IScriptEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this ISwitchEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this ISwitchEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this ISwitchEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IUpdateEntityCore target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<IUpdateEntityCore> target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this IUpdateEntityCore target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this IUpdateEntityCore target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The IEnumerable&lt;IUpdateEntityCore&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IUpdateEntityCore target)
    {
        target.CallService("skip");
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<IUpdateEntityCore> target)
    {
        target.CallService("skip");
    }
}

public static class UtilityMeterEntityExtensionMethods
{
    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void Calibrate(this ISensorEntityCore target, UtilityMeterCalibrateParameters data)
    {
        target.CallService("calibrate", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void Calibrate(this IEnumerable<ISensorEntityCore> target, UtilityMeterCalibrateParameters data)
    {
        target.CallService("calibrate", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="value">Value to which set the meter. eg: 100</param>
    public static void Calibrate(this ISensorEntityCore target, string value)
    {
        target.CallService("calibrate", new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="value">Value to which set the meter. eg: 100</param>
    public static void Calibrate(this IEnumerable<ISensorEntityCore> target, string value)
    {
        target.CallService("calibrate", new UtilityMeterCalibrateParameters { Value = value });
    }
}

public static class WeatherEntityExtensionMethods
{
    ///<summary>Get weather forecast.</summary>
    public static void GetForecast(this IWeatherEntityCore target, WeatherGetForecastParameters data)
    {
        target.CallService("get_forecast", data);
    }

    ///<summary>Get weather forecast.</summary>
    public static void GetForecast(this IEnumerable<IWeatherEntityCore> target, WeatherGetForecastParameters data)
    {
        target.CallService("get_forecast", data);
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecast(this IWeatherEntityCore target, object @type)
    {
        target.CallService("get_forecast", new WeatherGetForecastParameters { Type = @type });
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The IEnumerable&lt;IWeatherEntityCore&gt; to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecast(this IEnumerable<IWeatherEntityCore> target, object @type)
    {
        target.CallService("get_forecast", new WeatherGetForecastParameters { Type = @type });
    }
}